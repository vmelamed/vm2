<Project>
    <PropertyGroup>
        <TargetFramework>net9.0</TargetFramework>
        <LangVersion>latest</LangVersion>
        <Nullable>enable</Nullable>
        <ImplicitUsings>enable</ImplicitUsings>
        <EnforceCodeStyleInBuild>True</EnforceCodeStyleInBuild>
        <WarningLevel>9999</WarningLevel>
        <TreatWarningsAsErrors>True</TreatWarningsAsErrors>
        <NoWarn>$(NoWarn);</NoWarn>
        <ManagePackageVersionsCentrally>true</ManagePackageVersionsCentrally>
        <GenerateDocumentationFile>true</GenerateDocumentationFile>
        <SignAssembly>true</SignAssembly>
        <AssemblyOriginatorKeyFile>$(MSBuildThisFileDirectory)vm2signKey.snk</AssemblyOriginatorKeyFile>
    </PropertyGroup>

    <PropertyGroup Label="NuGet">
        <IsPackable>true</IsPackable>
        <Title>vm2 Linq Expression Deep Equals</Title>
        <Company>vm</Company>
        <Product>vm2</Product>
        <ProductName>Val Melamed's packages</ProductName>
        <Authors>Val Melamed</Authors>
        <Description>Performs &quot;deep equals&quot; of two LINQ Expressions.</Description>
        <PackageReleaseNotes>Moved to a self-containing project.</PackageReleaseNotes>
        <PackageProjectUrl>https://github.com/vmelamed/vm2/blob/main/src/ExpressionDeepEquals/ExpressionDeepEquals.csproj</PackageProjectUrl>
        <RepositoryUrl>https://github.com/vmelamed/vm2</RepositoryUrl>
        <PackageTags>C# LINQ expression deep equals</PackageTags>
        <Copyright>Copyright Â© 2023-2024 vm</Copyright>
        <PackageLicenseExpression>MIT</PackageLicenseExpression>
        <PackageRequireLicenseAcceptance>false</PackageRequireLicenseAcceptance>
        <RepositoryType>git</RepositoryType>
        <PackageReadmeFile>README.md</PackageReadmeFile>
        <IncludeSymbols>True</IncludeSymbols>
        <SymbolPackageFormat>snupkg</SymbolPackageFormat>
    </PropertyGroup>

    <!--
    Defining JSON_SCHEMA switches JSON validation to be done with Json.Schema from https://docs.json-everything.net/.
    It has some problems with numbers and with the huge recursive schema in some more complex cases.
    It uses System.Text.Json like this project.

    Otherwise JSON validation is done with Newtonsoft but it is paid if you want more than 1000 validations per hour and
    it is yet another JSON parser.
    -->

    <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|AnyCPU'">
        <DefineConstants>$(DefineConstants);JSON_SCHEMA</DefineConstants>
    </PropertyGroup>
    <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|AnyCPU'">
        <DefineConstants>$(DefineConstants);JSON_SCHEMA</DefineConstants>
    </PropertyGroup>
</Project>