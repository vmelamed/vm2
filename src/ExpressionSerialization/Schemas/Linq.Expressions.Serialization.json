{
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "$id": "urn:schemas-vm-com:Linq.Expressions.Serialization.Json",
    "title": "LINQ Expression Serialization",
    "description": "Schema of the JSON documents representing serialized Microsoft .NET LINQ expression trees.",
    "type": "object",
    "properties": {
        "expression": {
            "$ref": "#/$defs/expression"
        }
    },
    "required": [
        "expression"
    ],
    "$defs": {
        "expression": {
            "title": "Represents a JSON serialized LINQ expression",
            "type": "object",
            "oneOf": [
                {
                    "title": "Constant expression (e.g. `42`)",
                    "type": "object",
                    "properties": {
                        "constant": {
                            "$ref": "#/$defs/constant"
                        }
                    },
                    "required": [
                        "constant"
                    ],
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                {
                    "title": "Default value for the specified type (`default(int)`)",
                    "type": "object",
                    "properties": {
                        "default": {
                            "type": "object",
                            "properties": {
                                "type": {
                                    "type": "string"
                                }
                            },
                            "required": [
                                "type"
                            ],
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "required": [
                        "default"
                    ],
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                {
                    "title": "Parameter or Variable declaration or reference expression (e.g. `int i;`)",
                    "type": "object",
                    "properties": {
                        "parameter": {
                            "$ref": "#/$defs/components/parameters/parameter"
                        }
                    },
                    "required": [
                        "parameter"
                    ],
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                {
                    "title": "Label, e.g. to jump to with goto or break, etc. (e.g. `goto thePlace; ...; thePlace: ...`)",
                    "type": "object",
                    "properties": {
                        "label": {
                            "type": "object",
                            "properties": {
                                "target": {
                                    "$ref": "#/$defs/components/labels/target"
                                }
                            },
                            "required": [
                                "target"
                            ],
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "required": [
                        "label"
                    ],
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                {
                    "title": "Lambda expression (`(int a, int b) => a+b`)",
                    "$ref": "#/$defs/components/expressions/lambda"
                },
                {
                    "title": "Block expression (`{ ...; ...; }`)",
                    "type": "object",
                    "properties": {
                        "block": {
                            "type": "object",
                            "properties": {
                                "variables": {
                                    "$ref": "#/$defs/components/parameters/parameterList"
                                },
                                "expressions": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/$defs/expression"
                                    }
                                }
                            },
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "required": [
                        "block"
                    ],
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                {
                    "title": "Array length expression (int[] a; ...; a.Length; ...)",
                    "type": "object",
                    "properties": {
                        "arrayLength": {
                            "$ref": "#/$defs/components/expressions/unary"
                        }
                    },
                    "required": [
                        "arrayLength"
                    ],
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                {
                    "title": "Convert (cast) expression (`(double)i`)",
                    "type": "object",
                    "properties": {
                        "convert": {
                            "$ref": "#/$defs/components/expressions/unary"
                        }
                    },
                    "required": [
                        "convert"
                    ],
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                {
                    "title": "Convert (cast) checked expression (`checked((int)d)`)",
                    "type": "object",
                    "properties": {
                        "convertChecked": {
                            "$ref": "#/$defs/components/expressions/unary"
                        }
                    },
                    "required": [
                        "convertChecked"
                    ],
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                {
                    "title": "Negate expression (`-a`)",
                    "type": "object",
                    "properties": {
                        "negate": {
                            "$ref": "#/$defs/components/expressions/unary"
                        }
                    },
                    "required": [
                        "negate"
                    ],
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                {
                    "title": "Negate checked expression (`checked(-a)`)",
                    "type": "object",
                    "properties": {
                        "negateChecked": {
                            "$ref": "#/$defs/components/expressions/unary"
                        }
                    },
                    "required": [
                        "negateChecked"
                    ],
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                {
                    "title": "Logical Not expression (`!a`)",
                    "type": "object",
                    "properties": {
                        "not": {
                            "$ref": "#/$defs/components/expressions/unary"
                        }
                    },
                    "required": [
                        "not"
                    ],
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                {
                    "title": "Quote expression (returns the expression structure - no C# equivalent)",
                    "type": "object",
                    "properties": {
                        "quote": {
                            "$ref": "#/$defs/components/expressions/unary"
                        }
                    },
                    "required": [
                        "quote"
                    ],
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                {
                    "title": "Type as (dynamic cast) expression (`(int?)5`)",
                    "type": "object",
                    "properties": {
                        "typeAs": {
                            "$ref": "#/$defs/components/expressions/unary"
                        }
                    },
                    "required": [
                        "typeAs"
                    ],
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                {
                    "title": "Unary plus expression (`+a`)",
                    "type": "object",
                    "properties": {
                        "unaryPlus": {
                            "$ref": "#/$defs/components/expressions/unary"
                        }
                    },
                    "required": [
                        "unaryPlus"
                    ],
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                {
                    "title": "Ones complement (bitwise not) expression (`~a`)",
                    "type": "object",
                    "properties": {
                        "onesComplement": {
                            "$ref": "#/$defs/components/expressions/unary"
                        }
                    },
                    "required": [
                        "onesComplement"
                    ],
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                {
                    "title": "Throw (exception) expression (`throw new Exception()`)",
                    "type": "object",
                    "properties": {
                        "throw": {
                            "$ref": "#/$defs/components/expressions/unary"
                        }
                    },
                    "required": [
                        "throw"
                    ],
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                {
                    "title": "Unbox expression (`object a; ...; int b = (int)a; ...`)",
                    "type": "object",
                    "properties": {
                        "unbox": {
                            "$ref": "#/$defs/components/expressions/unary"
                        }
                    },
                    "required": [
                        "unbox"
                    ],
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                {
                    "title": "Add expression (`a+b`)",
                    "type": "object",
                    "properties": {
                        "add": {
                            "$ref": "#/$defs/components/expressions/binary"
                        }
                    },
                    "required": [
                        "add"
                    ],
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                {
                    "title": "Add checked expression (`checked(a+b)`)",
                    "type": "object",
                    "properties": {
                        "addChecked": {
                            "$ref": "#/$defs/components/expressions/binary"
                        }
                    },
                    "required": [
                        "addChecked"
                    ],
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                {
                    "title": "Bitwise and expression (`a & b`)",
                    "type": "object",
                    "properties": {
                        "and": {
                            "$ref": "#/$defs/components/expressions/binary"
                        }
                    },
                    "required": [
                        "and"
                    ],
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                {
                    "title": "Logical and expression (`a && b`)",
                    "type": "object",
                    "properties": {
                        "andAlso": {
                            "$ref": "#/$defs/components/expressions/binary"
                        }
                    },
                    "required": [
                        "andAlso"
                    ],
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                {
                    "title": "Index array expression (`arr[i]`)",
                    "type": "object",
                    "properties": {
                        "arrayIndex": {
                            "$ref": "#/$defs/components/expressions/binary"
                        }
                    },
                    "required": [
                        "arrayIndex"
                    ],
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                {
                    "title": "Divide expression (`a/b`)",
                    "type": "object",
                    "properties": {
                        "divide": {
                            "$ref": "#/$defs/components/expressions/binary"
                        }
                    },
                    "required": [
                        "divide"
                    ],
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                {
                    "title": "Equal expression (`a==b`)",
                    "type": "object",
                    "properties": {
                        "equal": {
                            "$ref": "#/$defs/components/expressions/binary"
                        }
                    },
                    "required": [
                        "equal"
                    ],
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                {
                    "title": "Exclusive or expression (`a^b`)",
                    "type": "object",
                    "properties": {
                        "exclusiveOr": {
                            "$ref": "#/$defs/components/expressions/binary"
                        }
                    },
                    "required": [
                        "exclusiveOr"
                    ],
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                {
                    "title": "GreaterThan expression (`a>b`)",
                    "type": "object",
                    "properties": {
                        "greaterThan": {
                            "$ref": "#/$defs/components/expressions/binary"
                        }
                    },
                    "required": [
                        "greaterThan"
                    ],
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                {
                    "title": "Greater than or equal expression (`a>=b`)",
                    "type": "object",
                    "properties": {
                        "greaterThanOrEqual": {
                            "$ref": "#/$defs/components/expressions/binary"
                        }
                    },
                    "required": [
                        "greaterThanOrEqual"
                    ],
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                {
                    "title": "Left shift expression (`a << b`)",
                    "type": "object",
                    "properties": {
                        "leftShift": {
                            "$ref": "#/$defs/components/expressions/binary"
                        }
                    },
                    "required": [
                        "leftShift"
                    ],
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                {
                    "title": "Less than expression (`a<b`)",
                    "type": "object",
                    "properties": {
                        "lessThan": {
                            "$ref": "#/$defs/components/expressions/binary"
                        }
                    },
                    "required": [
                        "lessThan"
                    ],
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                {
                    "title": "Less than or equal expression (`a<=b`)",
                    "type": "object",
                    "properties": {
                        "lessThanOrEqual": {
                            "$ref": "#/$defs/components/expressions/binary"
                        }
                    },
                    "required": [
                        "lessThanOrEqual"
                    ],
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                {
                    "title": "Modulo expression (`a%b`)",
                    "type": "object",
                    "properties": {
                        "modulo": {
                            "$ref": "#/$defs/components/expressions/binary"
                        }
                    },
                    "required": [
                        "modulo"
                    ],
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                {
                    "title": "Multiply expression (`a*b`)",
                    "type": "object",
                    "properties": {
                        "multiply": {
                            "$ref": "#/$defs/components/expressions/binary"
                        }
                    },
                    "required": [
                        "multiply"
                    ],
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                {
                    "title": "Multiply checked expression (`checked(a*b)`)",
                    "type": "object",
                    "properties": {
                        "multiplyChecked": {
                            "$ref": "#/$defs/components/expressions/binary"
                        }
                    },
                    "required": [
                        "multiplyChecked"
                    ],
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                {
                    "title": "Not equal expression (`a!=b`)",
                    "type": "object",
                    "properties": {
                        "notEqual": {
                            "$ref": "#/$defs/components/expressions/binary"
                        }
                    },
                    "required": [
                        "notEqual"
                    ],
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                {
                    "title": "Or expression (`a|b`)",
                    "type": "object",
                    "properties": {
                        "or": {
                            "$ref": "#/$defs/components/expressions/binary"
                        }
                    },
                    "required": [
                        "or"
                    ],
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                {
                    "title": "Or else expression (`a||b`)",
                    "type": "object",
                    "properties": {
                        "orElse": {
                            "$ref": "#/$defs/components/expressions/binary"
                        }
                    },
                    "required": [
                        "orElse"
                    ],
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                {
                    "title": "Power expression (VBasic: `a**b`)",
                    "type": "object",
                    "properties": {
                        "power": {
                            "$ref": "#/$defs/components/expressions/binary"
                        }
                    },
                    "required": [
                        "power"
                    ],
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                {
                    "title": "Right shift expression (`a >> b`)",
                    "type": "object",
                    "properties": {
                        "rightShift": {
                            "$ref": "#/$defs/components/expressions/binary"
                        }
                    },
                    "required": [
                        "rightShift"
                    ],
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                {
                    "title": "Subtract expression (`a-b`)",
                    "type": "object",
                    "properties": {
                        "subtract": {
                            "$ref": "#/$defs/components/expressions/binary"
                        }
                    },
                    "required": [
                        "subtract"
                    ],
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                {
                    "title": "Subtract checked expression (`checked(a-b)`)",
                    "type": "object",
                    "properties": {
                        "subtractChecked": {
                            "$ref": "#/$defs/components/expressions/binary"
                        }
                    },
                    "required": [
                        "subtractChecked"
                    ],
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                {
                    "title": "Coalesce expression (`a ?? b`)",
                    "type": "object",
                    "properties": {
                        "coalesce": {
                            "$ref": "#/$defs/components/expressions/binary"
                        }
                    },
                    "required": [
                        "coalesce"
                    ],
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                {
                    "title": "Type equal expression (no C# equivalent operation but can be expressed as `a.GetType() == typeof(T)`)",
                    "type": "object",
                    "properties": {
                        "typeEqual": {
                            "$ref": "#/$defs/components/expressions/typeBinary"
                        }
                    },
                    "required": [
                        "typeEqual"
                    ],
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                {
                    "title": "Type is expression (`a is string`)",
                    "type": "object",
                    "properties": {
                        "typeIs": {
                            "$ref": "#/$defs/components/expressions/typeBinary"
                        }
                    },
                    "required": [
                        "typeIs"
                    ],
                    "additionalProperties": {
                        "type": "string"
                    }
                }
            ]
        },
        "constant": {
            "title": "Constant value in a LINQ expression.",
            "type": "object",
            "oneOf": [
                {
                    "type": "null"
                },
                {
                    "$ref": "#/$defs/components/constants/boolean"
                },
                {
                    "$ref": "#/$defs/components/constants/byte"
                },
                {
                    "$ref": "#/$defs/components/constants/char"
                },
                {
                    "$ref": "#/$defs/components/constants/double"
                },
                {
                    "$ref": "#/$defs/components/constants/float"
                },
                {
                    "$ref": "#/$defs/components/constants/halfConstant"
                },
                {
                    "$ref": "#/$defs/components/constants/intConstant"
                },
                {
                    "$ref": "#/$defs/components/constants/intPtr"
                },
                {
                    "$ref": "#/$defs/components/constants/long"
                },
                {
                    "$ref": "#/$defs/components/constants/short"
                },
                {
                    "$ref": "#/$defs/components/constants/signedByte"
                },
                {
                    "$ref": "#/$defs/components/constants/unsignedInt"
                },
                {
                    "$ref": "#/$defs/components/constants/unsignedIntPtr"
                },
                {
                    "$ref": "#/$defs/components/constants/unsignedLong"
                },
                {
                    "$ref": "#/$defs/components/constants/unsignedShort"
                },
                {
                    "$ref": "#/$defs/components/constants/dateTime"
                },
                {
                    "$ref": "#/$defs/components/constants/dateTimeOffset"
                },
                {
                    "$ref": "#/$defs/components/constants/decimal"
                },
                {
                    "$ref": "#/$defs/components/constants/timeSpan"
                },
                {
                    "$ref": "#/$defs/components/constants/guid"
                },
                {
                    "$ref": "#/$defs/components/constants/enumeration"
                },
                {
                    "$ref": "#/$defs/components/constants/string"
                },
                {
                    "$ref": "#/$defs/components/constants/dbNull"
                },
                {
                    "$ref": "#/$defs/components/constants/uri"
                },
                {
                    "$ref": "#/$defs/components/constants/object"
                },
                {
                    "$ref": "#/$defs/components/constants/anonymous"
                },
                {
                    "$ref": "#/$defs/components/constants/byteSequence"
                },
                {
                    "$ref": "#/$defs/components/constants/sequence"
                },
                {
                    "$ref": "#/$defs/components/constants/dictionary"
                },
                {
                    "$ref": "#/$defs/components/constants/tuple"
                },
                {
                    "$ref": "#/$defs/components/constants/nullable"
                }
            ]
        },

        "assign": {},
        "addAssign": {},
        "addAssignChecked": {},
        "andAssign": {},
        "divideAssign": {},
        "exclusiveOrAssign": {},
        "leftShiftAssign": {},
        "moduloAssign": {},
        "multiplyAssign": {},
        "multiplyAssignChecked": {},
        "powerAssign": {},
        "orAssign": {},
        "rightShiftAssign": {},
        "subtractAssign": {},
        "subtractAssignChecked": {},

        "decrement": {},
        "increment": {},
        "postDecrementAssign": {},
        "postIncrementAssign": {},
        "preDecrementAssign": {},
        "preIncrementAssign": {},

        "components": {
            "constants": {
                "boolean": {
                    "title": "Boolean constants",
                    "type": "object",
                    "properties": {
                        "boolean": {
                            "type": "boolean"
                        }
                    },
                    "additionalProperties": {
                        "type": "string"
                    },
                    "required": [
                        "boolean"
                    ]
                },
                "byte": {
                    "title": "Byte constants",
                    "description": "Unsigned 8-bit integer value",
                    "type": "object",
                    "properties": {
                        "byte": {
                            "type": "number",
                            "minimum": 0,
                            "maximum": 255
                        }
                    },
                    "required": [
                        "byte"
                    ],
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "char": {
                    "title": "Unicode character value",
                    "type": "object",
                    "properties": {
                        "char": {
                            "type": "string",
                            "minLength": 1,
                            "maxLength": 1
                        }
                    },
                    "additionalProperties": {
                        "type": "string"
                    },
                    "required": [
                        "char"
                    ]
                },
                "double": {
                    "title": "Double precision, floating point numerical value",
                    "type": "object",
                    "properties": {
                        "double": {
                            "oneOf": [
                                {
                                    "type": "number"
                                },
                                {
                                    "type": "string",
                                    "pattern": "^(?:NaN)|(?:-?INF)$"
                                }
                            ]
                        }
                    },
                    "additionalProperties": {
                        "type": "string"
                    },
                    "required": [
                        "double"
                    ]
                },
                "float": {
                    "title": "Floating point numerical value.",
                    "type": "object",
                    "properties": {
                        "float": {
                            "oneOf": [
                                {
                                    "type": "number"
                                },
                                {
                                    "type": "string",
                                    "pattern": "^(?:NaN)|(?:-?INF)$"
                                }
                            ]
                        }
                    },
                    "additionalProperties": {
                        "type": "string"
                    },
                    "required": [
                        "float"
                    ]
                },
                "halfConstant": {
                    "title": "Half precision floating point numerical value.",
                    "type": "object",
                    "properties": {
                        "half": {
                            "oneOf": [
                                {
                                    "type": "number",
                                    "minimum": -65504,
                                    "maximum": 65504
                                },
                                {
                                    "type": "string",
                                    "pattern": "^(?:NaN)|(?:-?INF)$"
                                }
                            ]
                        }
                    },
                    "additionalProperties": {
                        "type": "string"
                    },
                    "required": [
                        "half"
                    ]
                },
                "intConstant": {
                    "title": "32-bit, signed, integer, numeric value",
                    "type": "object",
                    "properties": {
                        "int": {
                            "type": "integer",
                            "minimum": -2147483648,
                            "maximum": 2147483647
                        }
                    },
                    "additionalProperties": {
                        "type": "string"
                    },
                    "required": [
                        "int"
                    ]
                },
                "intPtr": {
                    "title": "Architecture dependent 32 or 64 bit, signed, integer, numeric value (.NET specific)",
                    "description": "Represents architecture dependent 32 or 64 bit, signed, integer numeric values. Note: it is a well-known problem that different languages represent internally big integer values differently: e.g. JavaScript and Go internally represent these JSON values as integers when they are in the range of [-2^53+1, 2^53-1] and as double precision values outside of that region. Therefore to avoid ambiguity and loss of fidelity this schema allows the integer values to be expressed also as string values, subject to pattern constrains.  The larger/smaller values of this type definitely may suffer from loss of fidelity.",
                    "type": "object",
                    "properties": {
                        "intPtr": {
                            "oneOf": [
                                {
                                    "type": "integer",
                                    "minimum": -9007199254740991,
                                    "maximum": 9007199254740991
                                },
                                {
                                    "type": "string",
                                    "pattern": "^(-0*9223372036854775808)|([-+]?0*922337203685477580[0-7])|([-+]?0*9223372036854775[0-7][0-9]{2})|([-+]?0*922337203685477[0-4][0-9]{3})|([-+]?0*92233720368547[0-6][0-9]{4})|([-+]?0*9223372036854[0-6][0-9]{5})|([-+]?0*922337203685[0-3][0-9]{6})|([-+]?0*92233720368[0-4][0-9]{7})|([-+]?0*9223372036[0-7][0-9]{8})|([-+]?0*922337203[0-5][0-9]{9})|([-+]?0*92233720[0-2][0-9]{10})|([-+]?0*922337[0-1][0-9]{12})|([-+]?0*92233[0-6][0-9]{13})|([-+]?0*9223[0-2][0-9]{14})|([-+]?0*922[0-2][0-9]{15})|([-+]?0*92[0-1][0-9]{16})|([-+]?0*9[0-1][0-9]{17})|([-+]?0*[0-8][0-9]{18})|([-+]?0*[0-9]{1,18})$$"
                                }
                            ]
                        }
                    },
                    "additionalProperties": {
                        "type": "string"
                    },
                    "required": [
                        "intPtr"
                    ]
                },
                "long": {
                    "title": "64-bit, signed, integer, numeric value",
                    "description": "Represents 64-bit, signed, integer numeric values. Note: it is a well-known problem that different languages represent internally big integer values differently: e.g. JavaScript and Go internally represent these JSON values as integers when they are in the range of [-2^53+1, 2^53-1] and as double precision values outside of that region. Therefore to avoid ambiguity and loss of fidelity this schema allows the integer values to be expressed also as string values, subject to pattern constrains. The larger/smaller values of this type definitely may suffer from loss of fidelity.",
                    "type": "object",
                    "properties": {
                        "long": {
                            "oneOf": [
                                {
                                    "type": "integer",
                                    "minimum": -9007199254740991,
                                    "maximum": 9007199254740991
                                },
                                {
                                    "type": "string",
                                    "pattern": "^(-0*9223372036854775808)|([-+]?0*922337203685477580[0-7])|([-+]?0*9223372036854775[0-7][0-9]{2})|([-+]?0*922337203685477[0-4][0-9]{3})|([-+]?0*92233720368547[0-6][0-9]{4})|([-+]?0*9223372036854[0-6][0-9]{5})|([-+]?0*922337203685[0-3][0-9]{6})|([-+]?0*92233720368[0-4][0-9]{7})|([-+]?0*9223372036[0-7][0-9]{8})|([-+]?0*922337203[0-5][0-9]{9})|([-+]?0*92233720[0-2][0-9]{10})|([-+]?0*922337[0-1][0-9]{12})|([-+]?0*92233[0-6][0-9]{13})|([-+]?0*9223[0-2][0-9]{14})|([-+]?0*922[0-2][0-9]{15})|([-+]?0*92[0-1][0-9]{16})|([-+]?0*9[0-1][0-9]{17})|([-+]?0*[0-8][0-9]{18})|([-+]?0*[0-9]{1,18})$$"
                                }
                            ]
                        }
                    },
                    "additionalProperties": {
                        "type": "string"
                    },
                    "required": [
                        "long"
                    ]
                },
                "short": {
                    "title": "16-bit, signed, integer, numeric value",
                    "type": "object",
                    "properties": {
                        "short": {
                            "type": "integer",
                            "minimum": -32768,
                            "maximum": 32767
                        }
                    },
                    "additionalProperties": {
                        "type": "string"
                    },
                    "required": [
                        "short"
                    ]
                },
                "signedByte": {
                    "title": "8-bit, signed, integer, numeric value",
                    "description": "Represents an 8-bit, unsigned, integer numeric values.",
                    "type": "object",
                    "properties": {
                        "signedByte": {
                            "type": "integer",
                            "minimum": -128,
                            "maximum": 127
                        }
                    },
                    "additionalProperties": {
                        "type": "string"
                    },
                    "required": [
                        "signedByte"
                    ]
                },
                "unsignedInt": {
                    "title": "32-bit, unsigned, integer, numeric value",
                    "type": "object",
                    "properties": {
                        "unsignedInt": {
                            "type": "integer",
                            "minimum": 0,
                            "maximum": 4294967295
                        }
                    },
                    "additionalProperties": {
                        "type": "string"
                    },
                    "required": [
                        "unsignedInt"
                    ]
                },
                "unsignedIntPtr": {
                    "title": "32 or 64 bit, unsigned, integer, numeric value (.NET specific)",
                    "description": "Represents architecture dependent 32 or 64 bit, unsigned, integer numeric values. Note: it is a well-known problem that different languages represent internally big integer values differently: e.g. JavaScript and Go internally represent these JSON values as integers when they are in the range of [-2^53+1, 2^53-1] and as double precision values outside of that region. Therefore to avoid ambiguity and loss of fidelity this schema allows the integer values to be expressed also as string values, subject to pattern constrains.  The larger/smaller values of this type definitely may suffer from loss of fidelity.",
                    "type": "object",
                    "properties": {
                        "unsignedIntPtr": {
                            "oneOf": [
                                {
                                    "type": "integer",
                                    "minimum": 0,
                                    "maximum": 9007199254740991
                                },
                                {
                                    "type": "string",
                                    "pattern": "^(0*1844674407370955161[0-5])|(0*1844674407370955160[0-9])|(0*18446744073709551[0-5][0-9]{2})|(0*18446744073709550[0-9]{3})|(0*184467440737095[0-4][0-9]{4})|(0*18446744073709[0-4][0-9]{5})|(0*1844674407370[0-8][0-9]{6})|(0*18446744073[0-6][0-9]{8})|(0*1844674407[0-2][0-9]{9})|(0*184467440[0-6][0-9]{10})|(0*1844674[0-3][0-9]{12})|(0*184467[0-3][0-9]{13})|(0*18446[0-6][0-9]{14})|(0*1844[0-5][0-9]{15})|(0*184[0-3][0-9]{16})|(0*18[0-3][0-9]{17})|(0*1[0-7][0-9]{18})|(0*[0-9]{1,19})$"
                                }
                            ]
                        }
                    },
                    "additionalProperties": {
                        "type": "string"
                    },
                    "required": [
                        "unsignedIntPtr"
                    ]
                },
                "unsignedLong": {
                    "title": "64-bit, unsigned, integer, numeric value",
                    "description": "Represents 64-bit, unsigned, integer numeric values. Note: it is a well-known problem that different languages represent internally big integer values differently: e.g. JavaScript and Go internally represent these JSON values as integers when they are in the range of [-2^53+1, 2^53-1] and as double precision values outside of that region. Therefore to avoid ambiguity and loss of fidelity this schema allows the integer values to be expressed also as string values, subject to pattern constrains.  The larger/smaller values of this type definitely may suffer from loss of fidelity.",
                    "type": "object",
                    "properties": {
                        "unsignedLong": {
                            "oneOf": [
                                {
                                    "type": "integer",
                                    "minimum": 0,
                                    "maximum": 9007199254740991
                                },
                                {
                                    "type": "string",
                                    "pattern": "^(0*1844674407370955161[0-5])|(0*1844674407370955160[0-9])|(0*18446744073709551[0-5][0-9]{2})|(0*18446744073709550[0-9]{3})|(0*184467440737095[0-4][0-9]{4})|(0*18446744073709[0-4][0-9]{5})|(0*1844674407370[0-8][0-9]{6})|(0*18446744073[0-6][0-9]{8})|(0*1844674407[0-2][0-9]{9})|(0*184467440[0-6][0-9]{10})|(0*1844674[0-3][0-9]{12})|(0*184467[0-3][0-9]{13})|(0*18446[0-6][0-9]{14})|(0*1844[0-5][0-9]{15})|(0*184[0-3][0-9]{16})|(0*18[0-3][0-9]{17})|(0*1[0-7][0-9]{18})|(0*[0-9]{1,19})$"
                                }
                            ]
                        }
                    },
                    "additionalProperties": {
                        "type": "string"
                    },
                    "required": [
                        "unsignedLong"
                    ]
                },
                "unsignedShort": {
                    "title": "16-bit, unsigned, integer, numeric value",
                    "type": "object",
                    "properties": {
                        "unsignedShort": {
                            "type": "integer",
                            "minimum": 0,
                            "maximum": 65535
                        }
                    },
                    "additionalProperties": {
                        "type": "string"
                    },
                    "required": [
                        "unsignedShort"
                    ]
                },
                "dateTime": {
                    "title": "Date and time values",
                    "description": "Represents points in time (date and time) as strings following RFC3339 and ISO 8601. If the UTC relation information is omitted, it is assumed that it is \"local time\".",
                    "type": "object",
                    "properties": {
                        "dateTime": {
                            "type": "string",
                            "pattern": "^[0-9]{4}-(?:0[1-9]|1[0-2])-(?:0[1-9]|[12][0-9]|3[0-1])[T ](?:[01][0-9]|2[0-3]):(?:[0-5][0-9]):(?:[0-5][0-9])(\\.[0-9]+)?(Z|([-+]([01][0-9]|2[0-3])(:?[0-5][0-9])?))?$"
                        }
                    },
                    "additionalProperties": {
                        "type": "string"
                    },
                    "required": [
                        "dateTime"
                    ]
                },
                "dateTimeOffset": {
                    "title": "Date and time values represented as offset from UTC.",
                    "description": "Represents points in time (date and time) as strings following RFC3339 and ISO 8601",
                    "type": "object",
                    "properties": {
                        "dateTimeOffset": {
                            "type": "string",
                            "format": "date-time",
                            "pattern": "^[0-9]{4}-(?:0[1-9]|1[0-2])-(?:0[1-9]|[12][0-9]|3[0-1])[T ](?:[01][0-9]|2[0-3]):(?:[0-5][0-9]):(?:[0-5][0-9])(\\.[0-9]+)?(Z|([-+]([01][0-9]|2[0-3])(:?[0-5][0-9])?))$"
                        }
                    },
                    "additionalProperties": {
                        "type": "string"
                    },
                    "required": [
                        "dateTimeOffset"
                    ]
                },
                "dbNull": {
                    "title": "DBNull type",
                    "type": "object",
                    "properties": {
                        "dbNull": {
                            "type": "null",
                            "default": null
                        }
                    },
                    "additionalProperties": {
                        "type": "string"
                    },
                    "required": [
                        "dbNull"
                    ]
                },
                "decimal": {
                    "title": "Represents decimal, fixed point values.",
                    "description": "The values can be represented as both numeric and string JSON values.",
                    "type": "object",
                    "properties": {
                        "decimal": {
                            "type": "string",
                            "pattern": "^[-+]?([0-9]+(\\.[0-9]*))|(([0-9]*\\.)?([0-9])+)$"
                        }
                    },
                    "additionalProperties": {
                        "type": "string"
                    },
                    "required": [
                        "decimal"
                    ]
                },
                "timeSpan": {
                    "title": "Time duration values",
                    "description": "Represents time duration as strings following ISO 8601.",
                    "type": "object",
                    "properties": {
                        "duration": {
                            "type": "string",
                            "pattern": "^-?P((([0-9]+D)|([0-9]+M)(([0-9]+D))?|([0-9]+Y)(([0-9]+M)(([0-9]+D))?)?)(T((([0-9]+H)(([0-9]+M)(([0-9]+S))?)?|([0-9]+M)(([0-9]+S))?|([0-9]+S))))?|T((([0-9]+H)(([0-9]+M)(([0-9]+S))?)?|([0-9]+M)(([0-9]+S))?|([0-9]+S)))|([0-9]+W))$"
                        }
                    },
                    "additionalProperties": {
                        "type": "string"
                    },
                    "required": [
                        "duration"
                    ]
                },
                "guid": {
                    "title": "UUID (a.k.a. GUID) values",
                    "type": "object",
                    "properties": {
                        "guid": {
                            "type": "string",
                            "format": "uuid",
                            "pattern": "^(?:(?:[\\(\\{]?)[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-[0-9A-Fa-f]{4}-[0-9A-Fa-f]{4}-[0-9A-Fa-f]{12}(?:[\\}\\)]?))|(?:[0-9A-Fa-f]{32})$"
                        }
                    },
                    "additionalProperties": {
                        "type": "string"
                    },
                    "required": [
                        "guid"
                    ]
                },
                "string": {
                    "title": "Unicode string values",
                    "type": "object",
                    "properties": {
                        "string": {
                            "oneOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ]
                        }
                    },
                    "additionalProperties": {
                        "type": "string"
                    },
                    "required": [
                        "string"
                    ]
                },
                "uri": {
                    "title": "URI and IRI values",
                    "type": "object",
                    "properties": {
                        "uri": {
                            "oneOf": [
                                {
                                    "type": "null"
                                },
                                {
                                    "type": "string",
                                    "format": "iri-reference"
                                }
                            ]
                        }
                    },
                    "additionalProperties": {
                        "type": "string"
                    },
                    "required": [
                        "uri"
                    ]
                },
                "enumeration": {
                    "title": "Enumeration type",
                    "type": "object",
                    "properties": {
                        "enum": {
                            "type": "object",
                            "properties": {
                                "type": {
                                    "type": "string"
                                },
                                "value": {
                                    "oneOf": [
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "$comment": "When the enum type is marked with FlagsAttribute",
                                            "type": "array",
                                            "items": {
                                                "type": "string"
                                            }
                                        }
                                    ]
                                },
                                "baseType": {
                                    "type": "string",
                                    "default": "int"
                                },
                                "baseValue": {
                                    "type": "integer"
                                }
                            },
                            "additionalProperties": false,
                            "required": [
                                "type",
                                "value"
                            ]
                        }
                    },
                    "additionalProperties": {
                        "type": "string"
                    },
                    "required": [
                        "enum"
                    ]
                },
                "byteSequence": {
                    "title": "Arbitrary sequence of bytes",
                    "description": "This type represents a sequence of bytes Base64 encoded. The value can be a single string or an array of strings. It can be also null.",
                    "type": "object",
                    "properties": {
                        "byteSequence": {
                            "type": "object",
                            "properties": {
                                "type": {
                                    "type": "string"
                                },
                                "value": {
                                    "oneOf": [
                                        {
                                            "type": "null"
                                        },
                                        {
                                            "type": "string",
                                            "pattern": "^[0-9A-Za-z/+]*={0,2}$",
                                            "contentEncoding": "base64",
                                            "contentMediaType": "application/octet-stream"
                                        },
                                        {
                                            "$comment": "when the value is encoded with multiline Base64",
                                            "type": "array",
                                            "items": {
                                                "type": "string",
                                                "pattern": "^[0-9A-Za-z/+]*={0,2}$",
                                                "contentEncoding": "base64",
                                                "contentMediaType": "application/octet-stream"
                                            }
                                        }
                                    ]
                                },
                                "length": {
                                    "type": "integer"
                                }
                            },
                            "additionalProperties": {
                                "type": "string"
                            },
                            "required": [
                                "type",
                                "value"
                            ]
                        }
                    },
                    "additionalProperties": {
                        "type": "string"
                    },
                    "required": [
                        "byteSequence"
                    ]
                },
                "anonymous": {
                    "title": "JSON serialized anonymous object",
                    "type": "object",
                    "properties": {
                        "anonymous": {
                            "type": "object",
                            "properties": {
                                "type": {
                                    "type": "string"
                                },
                                "value": {
                                    "type": "object",
                                    "patternProperties": {
                                        "^@?[A-Z_a-z][0-9A-Z_a-z]*$": {
                                            "$ref": "#/$defs/constant"
                                        }
                                    },
                                    "minProperties": 1,
                                    "additionalProperties": false
                                }
                            },
                            "required": [
                                "type",
                                "value"
                            ]
                        }
                    },
                    "additionalProperties": {
                        "type": "string"
                    },
                    "required": [
                        "anonymous"
                    ]
                },
                "tuple": {
                    "title": "Represents a .NET tuple (class Tuple<> or ValueTuple<>)",
                    "type": "object",
                    "properties": {
                        "tuple": {
                            "type": "object",
                            "properties": {
                                "type": {
                                    "type": "string"
                                },
                                "value": {
                                    "oneOf": [
                                        {
                                            "type": "null"
                                        },
                                        {
                                            "type": "object",
                                            "patternProperties": {
                                                "^Item[1-8]$": {
                                                    "type": "object",
                                                    "properties": {
                                                        "type": {
                                                            "type": "string"
                                                        },
                                                        "value": {
                                                            "$ref": "#/$defs/constant"
                                                        }
                                                    },
                                                    "required": [
                                                        "type",
                                                        "value"
                                                    ],
                                                    "additionalProperties": {
                                                        "type": "string"
                                                    }
                                                }
                                            },
                                            "minProperties": 1,
                                            "maxProperties": 8,
                                            "additionalProperties": false
                                        }
                                    ]
                                }
                            },
                            "required": [
                                "type",
                                "value"
                            ],
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "additionalProperties": {
                        "type": "string"
                    },
                    "required": [
                        "tuple"
                    ]
                },
                "sequence": {
                    "title": "Represents sequences of values (array, list, set, etc.)",
                    "type": "object",
                    "properties": {
                        "sequence": {
                            "type": "object",
                            "properties": {
                                "type": {
                                    "type": "string"
                                },
                                "value": {
                                    "oneOf": [
                                        {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/$defs/constant"
                                            }
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ]
                                },
                                "length": {
                                    "type": "integer"
                                }
                            },
                            "additionalProperties": {
                                "type": "string"
                            },
                            "required": [
                                "type",
                                "value"
                            ]
                        }
                    },
                    "additionalProperties": {
                        "type": "string"
                    },
                    "required": [
                        "sequence"
                    ]
                },
                "dictionary": {
                    "title": "Represents a dictionary (hashtable, dictionary, etc.) of key - value pairs",
                    "type": "object",
                    "properties": {
                        "dictionary": {
                            "type": "object",
                            "properties": {
                                "type": {
                                    "type": "string"
                                },
                                "value": {
                                    "oneOf": [
                                        {
                                            "type": "array",
                                            "items": {
                                                "type": "object",
                                                "properties": {
                                                    "key": {
                                                        "$ref": "#/$defs/constant"
                                                    },
                                                    "value": {
                                                        "$ref": "#/$defs/constant"
                                                    }
                                                },
                                                "additionalProperties": {
                                                    "type": "string"
                                                },
                                                "required": [
                                                    "key",
                                                    "value"
                                                ]
                                            }
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ]
                                },
                                "length": {
                                    "type": "integer"
                                }
                            },
                            "additionalProperties": {
                                "type": "string"
                            },
                            "required": [
                                "type",
                                "value"
                            ]
                        }
                    },
                    "additionalProperties": {
                        "type": "string"
                    },
                    "required": [
                        "dictionary"
                    ]
                },
                "object": {
                    "title": "JSON serialized object",
                    "type": "object",
                    "properties": {
                        "object": {
                            "type": "object",
                            "properties": {
                                "type": {
                                    "type": "string"
                                },
                                "concreteType": {
                                    "$comment": "The actual type of the object can be different from the declared type if the type of the object is derived from the declared type.",
                                    "type": "string"
                                },
                                "value": {
                                    "oneOf": [
                                        {
                                            "type": "object"
                                        },
                                        {
                                            "$comment": "Only reference types can have value null.",
                                            "type": "null"
                                        }
                                    ]
                                }
                            },
                            "additionalProperties": {
                                "type": "string"
                            },
                            "required": [
                                "type",
                                "value"
                            ]
                        }
                    },
                    "additionalProperties": {
                        "type": "string"
                    },
                    "required": [
                        "object"
                    ]
                },
                "nullable": {
                    "title": "Represents Nullable<> .NET types",
                    "type": "object",
                    "properties": {
                        "nullable": {
                            "oneOf": [
                                {
                                    "title": "Null Nullable<T>",
                                    "$comment": "Represents a Nullable<T> value for which `HasValue` is `false`.",
                                    "type": "object",
                                    "properties": {
                                        "type": {
                                            "type": "string"
                                        },
                                        "value": {
                                            "type": "null"
                                        }
                                    },
                                    "additionalProperties": {
                                        "type": "string"
                                    },
                                    "required": [
                                        "type"
                                    ]
                                },
                                {
                                    "$ref": "#/$defs/components/constants/boolean"
                                },
                                {
                                    "$ref": "#/$defs/components/constants/byte"
                                },
                                {
                                    "$ref": "#/$defs/components/constants/char"
                                },
                                {
                                    "$ref": "#/$defs/components/constants/double"
                                },
                                {
                                    "$ref": "#/$defs/components/constants/float"
                                },
                                {
                                    "$ref": "#/$defs/components/constants/halfConstant"
                                },
                                {
                                    "$ref": "#/$defs/components/constants/intConstant"
                                },
                                {
                                    "$ref": "#/$defs/components/constants/intPtr"
                                },
                                {
                                    "$ref": "#/$defs/components/constants/long"
                                },
                                {
                                    "$ref": "#/$defs/components/constants/short"
                                },
                                {
                                    "$ref": "#/$defs/components/constants/signedByte"
                                },
                                {
                                    "$ref": "#/$defs/components/constants/unsignedInt"
                                },
                                {
                                    "$ref": "#/$defs/components/constants/unsignedIntPtr"
                                },
                                {
                                    "$ref": "#/$defs/components/constants/unsignedLong"
                                },
                                {
                                    "$ref": "#/$defs/components/constants/unsignedShort"
                                },
                                {
                                    "$ref": "#/$defs/components/constants/dateTime"
                                },
                                {
                                    "$ref": "#/$defs/components/constants/dateTimeOffset"
                                },
                                {
                                    "$ref": "#/$defs/components/constants/decimal"
                                },
                                {
                                    "$ref": "#/$defs/components/constants/timeSpan"
                                },
                                {
                                    "$ref": "#/$defs/components/constants/guid"
                                },
                                {
                                    "$ref": "#/$defs/components/constants/enumeration"
                                },
                                {
                                    "$comment": "Here we mean only struct object values but I don't know how to constrain that.",
                                    "$ref": "#/$defs/components/constants/object"
                                },
                                {
                                    "$comment": "Here we mean only struct object values (e.g. Memory<>, ReadOnlyMemory<> or ArraySegment<>) I don't know how to constrain that.",
                                    "$ref": "#/$defs/components/constants/sequence"
                                },
                                {
                                    "$comment": "Here we mean only struct object values (i.e. ValueTuple<>) I don't know how to constrain that.",
                                    "$ref": "#/$defs/components/constants/tuple"
                                }
                            ]
                        }
                    },
                    "required": [
                        "nullable"
                    ]
                }
            },
            "tokens": {
                "identifier": {
                    "type": "string",
                    "pattern": "^@?[A-Z_a-z][0-9A-Z_a-z]*$"
                },
                "parameterIdType": {
                    "type": "string",
                    "pattern": "^P[0-9]+$"
                },
                "labelTargetIdType": {
                    "type": "string",
                    "pattern": "^L[0-9]+$"
                }
            },
            "parameters": {
                "parameterSpec": {
                    "title": "Represents a parameter specification as in a MethodInfo or delegate",
                    "type": "object",
                    "properties": {
                        "type": {
                            "type": "string"
                        },
                        "name": {
                            "$ref": "#/$defs/components/tokens/identifier"
                        },
                        "isByRef": {
                            "type": "boolean"
                        }
                    },
                    "required": [
                        "type"
                    ],
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "parameterSpecList": {
                    "title": "Represents a list of parameter specifications",
                    "type": "array",
                    "items": {
                        "$ref": "#/$defs/components/parameters/parameterSpec"
                    }
                },
                "parameter": {
                    "type": "object",
                    "properties": {
                        "type": {
                            "type": "string"
                        },
                        "name": {
                            "$ref": "#/$defs/components/tokens/identifier"
                        },
                        "isByRef": {
                            "type": "boolean"
                        },
                        "id": {
                            "$ref": "#/$defs/components/tokens/parameterIdType"
                        }
                    },
                    "required": [
                        "type",
                        "name",
                        "id"
                    ],
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "parameterList": {
                    "title": "Represents a list of parameters",
                    "type": "array",
                    "items": {
                        "$ref": "#/$defs/components/parameters/parameter"
                    }
                }
            },
            "labels": {
                "target": {
                    "title": "Represents a location target in an (e.g. block) expression or a reference to a location target in a goto, break, continue, return statements.",
                    "type": "object",
                    "properties": {
                        "type": {
                            "type": "string"
                        },
                        "name": {
                            "$ref": "#/$defs/components/tokens/identifier"
                        },
                        "id": {
                            "$ref": "#/$defs/components/tokens/labelTargetIdType"
                        }
                    },
                    "required": [
                        "id"
                    ],
                    "additionalProperties": {
                        "type": "string"
                    }
                }
            },
            "reflection": {
                "visibility": {
                    "enum": [
                        "private",
                        "protected",
                        "assembly",
                        "familyAndAssembly",
                        "familyOrAssembly",
                        "public"
                    ],
                    "default": "public"
                },
                "constructor": {
                    "title": "Represents ConstructorInfo",
                    "type": "object",
                    "properties": {
                        "declaringType": {
                            "type": "string"
                        },
                        "visibility": {
                            "$ref": "#/$defs/components/reflection/visibility"
                        },
                        "parameterSpecs": {
                            "$ref": "#/$defs/components/parameters/parameterSpecList"
                        }
                    },
                    "required": [
                        "declaringType",
                        "parameterSpecs"
                    ],
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "property": {
                    "title": "Represents PropertyInfo",
                    "type": "object",
                    "properties": {
                        "declaringType": {
                            "type": "string"
                        },
                        "visibility": {
                            "$ref": "#/$defs/components/reflection/visibility"
                        },
                        "type": {
                            "type": "string"
                        },
                        "name": {
                            "$ref": "#/$defs/components/tokens/identifier"
                        },
                        "parameterSpecs": {
                            "$ref": "#/$defs/components/parameters/parameterSpecList"
                        }
                    },
                    "required": [
                        "declaringType",
                        "type",
                        "name"
                    ],
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "method": {
                    "title": "Represents MethodInfo",
                    "type": "object",
                    "properties": {
                        "declaringType": {
                            "type": "string"
                        },
                        "static": {
                            "type": "boolean"
                        },
                        "visibility": {
                            "$ref": "#/$defs/components/reflection/visibility"
                        },
                        "type": {
                            "type": "string"
                        },
                        "name": {
                            "$ref": "#/$defs/components/tokens/identifier"
                        },
                        "parameterSpecs": {
                            "$ref": "#/$defs/components/parameters/parameterSpecList"
                        }
                    },
                    "required": [
                        "declaringType",
                        "type",
                        "name",
                        "parameterSpecs"
                    ],
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "event": {
                    "title": "Represents EventInfo",
                    "type": "object",
                    "properties": {
                        "declaringType": {
                            "type": "string"
                        },
                        "type": {
                            "type": "string"
                        },
                        "name": {
                            "$ref": "#/$defs/components/tokens/identifier"
                        }
                    },
                    "required": [
                        "declaringType",
                        "type",
                        "name"
                    ],
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "field": {
                    "title": "Represents FieldInfo",
                    "type": "object",
                    "properties": {
                        "declaringType": {
                            "type": "string"
                        },
                        "static": {
                            "type": "boolean"
                        },
                        "visibility": {
                            "$ref": "#/$defs/components/reflection/visibility"
                        },
                        "readOnly": {
                            "type": "boolean"
                        },
                        "type": {
                            "type": "string"
                        },
                        "name": {
                            "$ref": "#/$defs/components/tokens/identifier"
                        }
                    },
                    "required": [
                        "declaringType",
                        "type",
                        "name"
                    ],
                    "additionalProperties": {
                        "type": "string"
                    }
                }
            },
            "expressions": {
                "lambda": {
                    "title": "Specifies a lambda expression (`(int a, int b) => a+b`)",
                    "type": "object",
                    "properties": {
                        "lambda": {
                            "type": "object",
                            "properties": {
                                "parameters": {
                                    "$ref": "#/$defs/components/parameters/parameterList"
                                },
                                "body": {
                                    "$ref": "#/$defs/expression"
                                },
                                "name": {
                                    "type": "string"
                                },
                                "delegateType": {
                                    "type": "string"
                                },
                                "type": {
                                    "type": "string"
                                },
                                "tailCall": {
                                    "type": "boolean"
                                }
                            },
                            "required": [
                                "parameters",
                                "body"
                            ],
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "required": [
                        "lambda"
                    ],
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "unary": {
                    "title": "Specifies a unary expression: Negate, NegateChecked, Not, ArrayLength, Convert, ConvertChecked, Quote, TypeAs, UnaryPlus",
                    "type": "object",
                    "properties": {
                        "operands": {
                            "type": "array",
                            "items": {
                                "$ref": "#/$defs/expression"
                            },
                            "minItems": 1,
                            "maxItems": 1
                        },
                        "method": {
                            "$ref": "#/$defs/components/reflection/method"
                        },
                        "type": {
                            "type": "string"
                        },
                        "lifted": {
                            "type": "boolean"
                        },
                        "liftedToNull": {
                            "type": "boolean"
                        }
                    },
                    "required": [
                        "operands"
                    ],
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "binary": {
                    "title": "Specifies a binary expression: Add, Subtract, etc.",
                    "type": "object",
                    "properties": {
                        "operands": {
                            "type": "array",
                            "items": {
                                "$ref": "#/$defs/expression"
                            },
                            "minItems": 2,
                            "maxItems": 2
                        },
                        "method": {
                            "$ref": "#/$defs/components/reflection/method"
                        },
                        "type": {
                            "type": "string"
                        },
                        "conversion": {
                            "$ref": "#/$defs/components/expressions/lambda"
                        },
                        "lifted": {
                            "type": "boolean"
                        },
                        "liftedToNull": {
                            "type": "boolean"
                        }
                    },
                    "required": [
                        "operands"
                    ],
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "typeBinary": {
                    "title": "Specifies an operation between an expression and a type.",
                    "type": "object",
                    "properties": {
                        "expression": {
                            "$ref": "#/$defs/expression"
                        },
                        "typeOperand": {
                            "type": "string"
                        },
                        "type": {
                            "type": "string"
                        }
                    },
                    "required": [
                        "expression",
                        "typeOperand"
                    ],
                    "additionalProperties": {
                        "type": "string"
                    }
                }
            }
        }
    }
}
