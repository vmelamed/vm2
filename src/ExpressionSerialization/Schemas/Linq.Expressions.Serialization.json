{
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "$id": "urn:schemas-vm-com:Linq.Expressions.Serialization.Json",
    "title": "LINQ Expression Serialization",
    "description": "Schema of the JSON documents representing serialized Microsoft .NET LINQ expression trees.",
    "type": "object",
    "properties": {
        "expression": {
            "type": "object",
            "properties": {
                "constant": {
                    "$ref": "#/$defs/constantValue"
                }
            },
            "additionalProperties": false
        }
    },
    "required": [
        "expression"
    ],
    "additionalProperties": {
        "type": "string"
    },
    "$defs": {
        "booleanConstant": {
            "title": "Boolean constants",
            "type": "object",
            "properties": {
                "boolean": {
                    "type": "boolean"
                }
            },
            "additionalProperties": {
                "type": "string"
            },
            "required": [
                "boolean"
            ]
        },
        "byteConstant": {
            "title": "Byte constants",
            "description": "Unsigned 8-bit integer value",
            "type": "object",
            "properties": {
                "byte": {
                    "type": "number",
                    "minimum": 0,
                    "maximum": 255
                }
            },
            "additionalProperties": {
                "type": "string"
            },
            "required": [
                "byte"
            ]
        },
        "charConstant": {
            "title": "Unicode character value",
            "type": "object",
            "properties": {
                "char": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 1
                }
            },
            "additionalProperties": {
                "type": "string"
            },
            "required": [
                "char"
            ]
        },
        "doubleConstant": {
            "title": "Double precision, floating point numerical value",
            "type": "object",
            "properties": {
                "double": {
                    "type": "number"
                }
            },
            "additionalProperties": {
                "type": "string"
            },
            "required": [
                "double"
            ]
        },
        "floatConstant": {
            "title": "Floating point numerical value.",
            "type": "object",
            "properties": {
                "float": {
                    "type": "number"
                }
            },
            "additionalProperties": {
                "type": "string"
            },
            "required": [
                "float"
            ]
        },
        "halfConstant": {
            "title": "Half precision floating point numerical value.",
            "type": "object",
            "properties": {
                "half": {
                    "type": "number",
                    "minimum": -65500,
                    "maximum": 65500
                }
            },
            "additionalProperties": {
                "type": "string"
            },
            "required": [
                "half"
            ]
        },
        "intConstant": {
            "title": "32-bit, signed, integer, numeric value",
            "$comment": "Represents 32-bit, signed, integer, numeric values. Note: it is a well-known problem that different languages represent internally big integer values differently: e.g. JavaScript and Go internally represent these JSON values as integers when they are in the range of [-2^53, 2^53-1] and as double precision values outside of that region. Therefore to avoid ambiguity and loss of fidelity this schema allows the integer values to be expressed also as string values, subject to pattern constrains. Even though the current type of constants fit well in the JavaScript integer range, for consistency this and all integer values can be represented as strings as well.",
            "type": "object",
            "properties": {
                "int": {
                    "type": "integer",
                    "minimum": -2147483648,
                    "maximum": 2147483647
                }
            },
            "additionalProperties": {
                "type": "string"
            },
            "required": [
                "int"
            ]
        },
        "intPtrConstant": {
            "title": "32-bit, signed, integer, numeric value (.NET specific)",
            "$comment": "Represents 32-bit, signed, integer numeric values. Note: it is a well-known problem that different languages represent internally big integer values differently: e.g. JavaScript and Go internally represent these JSON values as integers when they are in the range of [-2^53, 2^53-1] and as double precision values outside of that region. Therefore to avoid ambiguity and loss of fidelity this schema allows the integer values to be expressed also as string values, subject to pattern constrains. Even though the current type of constants fit well in the JavaScript integer range, for consistency this and all integer values can be represented as strings as well.",
            "type": "object",
            "properties": {
                "intPtr": {
                    "type": "integer",
                    "minimum": -2147483648,
                    "maximum": 2147483647
                }
            },
            "additionalProperties": {
                "type": "string"
            },
            "required": [
                "intPtr"
            ]
        },
        "longConstant": {
            "title": "64-bit, signed, integer, numeric value",
            "description": "Represents 64-bit, signed, integer numeric values. Note: it is a well-known problem that different languages represent internally big integer values differently: e.g. JavaScript and Go internally represent these JSON values as integers when they are in the range of [-2^53, 2^53-1] and as double precision values outside of that region. Therefore to avoid ambiguity and loss of fidelity this schema allows the integer values to be expressed also as string values, subject to pattern constrains. The larger/smaller values of this type definitely may suffer from loss of fidelity.",
            "type": "object",
            "properties": {
                "long": {
                    "oneOf": [
                        {
                            "type": "integer",
                            "minimum": -9007199254740991,
                            "maximum": 9007199254740991
                        },
                        {
                            "type": "string",
                            "pattern": "^(-0*9223372036854775808)|([-+]?0*922337203685477580[0-7])|([-+]?0*9223372036854775[0-7][0-9]{2})|([-+]?0*922337203685477[0-4][0-9]{3})|([-+]?0*92233720368547[0-6][0-9]{4})|([-+]?0*9223372036854[0-6][0-9]{5})|([-+]?0*922337203685[0-3][0-9]{6})|([-+]?0*92233720368[0-4][0-9]{7})|([-+]?0*9223372036[0-7][0-9]{8})|([-+]?0*922337203[0-5][0-9]{9})|([-+]?0*92233720[0-2][0-9]{10})|([-+]?0*922337[0-1][0-9]{12})|([-+]?0*92233[0-6][0-9]{13})|([-+]?0*9223[0-2][0-9]{14})|([-+]?0*922[0-2][0-9]{15})|([-+]?0*92[0-1][0-9]{16})|([-+]?0*9[0-1][0-9]{17})|([-+]?0*[0-8][0-9]{18})|([-+]?0*[0-9]{1,18})$$"
                        }
                    ]
                }
            },
            "additionalProperties": {
                "type": "string"
            },
            "required": [
                "long"
            ]
        },
        "shortConstant": {
            "title": "16-bit, signed, integer, numeric value",
            "description": "Represents 16-bit, signed, integer numeric values. Note: it is a well-known problem that different languages represent internally big integer values differently: e.g. JavaScript and Go internally represent these JSON values as integers when they are in the range of [-2^53, 2^53-1] and as double precision values outside of that region. Therefore to avoid ambiguity and loss of fidelity this schema allows the integer values to be expressed also as string values, subject to pattern constrains. Even though the current type of constants fit well in the JavaScript integer range, for consistency this and all integer values can be represented as strings as well.",
            "type": "object",
            "properties": {
                "short": {
                    "type": "integer",
                    "minimum": -32768,
                    "maximum": 32767
                }
            },
            "additionalProperties": {
                "type": "string"
            },
            "required": [
                "short"
            ]
        },
        "signedByteConstant": {
            "title": "8-bit, signed, integer, numeric value",
            "description": "Represents an 8-bit, unsigned, integer numeric values.",
            "type": "object",
            "properties": {
                "signedByte": {
                    "type": "integer",
                    "minimum": -128,
                    "maximum": 127
                }
            },
            "additionalProperties": {
                "type": "string"
            },
            "required": [
                "signedByte"
            ]
        },
        "unsignedIntConstant": {
            "title": "32-bit, unsigned, integer, numeric value",
            "$comment": "Represents 32-bit, unsigned, integer numeric values. Note: it is a well-known problem that different languages represent internally big integer values differently: e.g. JavaScript and Go internally represent these JSON values as integers when they are in the range of [-2^53, 2^53-1] and as double precision values outside of that region. Therefore to avoid ambiguity and loss of fidelity this schema allows the integer values to be expressed also as string values, subject to pattern constrains. Even though the current type of constants fit well in the JavaScript integer range, for consistency this and all integer values can be represented as strings as well.",
            "type": "object",
            "properties": {
                "unsignedInt": {
                    "type": "integer",
                    "minimum": 0,
                    "maximum": 4294967295
                }
            },
            "additionalProperties": {
                "type": "string"
            },
            "required": [
                "unsignedInt"
            ]
        },
        "unsignedIntPtrConstant": {
            "title": "32-bit, unsigned, integer, numeric value (.NET specific)",
            "$comment": "Represents 32-bit, unsigned, integer numeric values. Note: it is a well-known problem that different languages represent internally big integer values differently: e.g. JavaScript and Go internally represent these JSON values as integers when they are in the range of [-2^53, 2^53-1] and as double precision values outside of that region. Therefore to avoid ambiguity and loss of fidelity this schema allows the integer values to be expressed also as string values, subject to pattern constrains. Even though the current type of constants fit well in the JavaScript integer range, for consistency this and all integer values can be represented as strings as well.",
            "type": "object",
            "properties": {
                "unsignedIntPtr": {
                    "type": "integer",
                    "minimum": 0,
                    "maximum": 4294967295
                }
            },
            "additionalProperties": {
                "type": "string"
            },
            "required": [
                "unsignedIntPtr"
            ]
        },
        "unsignedLongConstant": {
            "title": "64-bit, unsigned, integer, numeric value",
            "description": "Represents 64-bit, unsigned, integer numeric values. Note: it is a well-known problem that different languages represent internally big integer values differently: e.g. JavaScript and Go internally represent these JSON values as integers when they are in the range of [-2^53, 2^53-1] and as double precision values outside of that region. Therefore to avoid ambiguity and loss of fidelity this schema allows the integer values to be expressed also as string values, subject to pattern constrains.  The larger/smaller values of this type definitely may suffer from loss of fidelity.",
            "type": "object",
            "properties": {
                "unsignedLong": {
                    "oneOf": [
                        {
                            "type": "integer",
                            "minimum": 0,
                            "maximum": 9007199254740991
                        },
                        {
                            "type": "string",
                            "pattern": "^(0*1844674407370955161[0-5])|(0*1844674407370955160[0-9])|(0*18446744073709551[0-5][0-9]{2})|(0*18446744073709550[0-9]{3})|(0*184467440737095[0-4][0-9]{4})|(0*18446744073709[0-4][0-9]{5})|(0*1844674407370[0-8][0-9]{6})|(0*18446744073[0-6][0-9]{8})|(0*1844674407[0-2][0-9]{9})|(0*184467440[0-6][0-9]{10})|(0*1844674[0-3][0-9]{12})|(0*184467[0-3][0-9]{13})|(0*18446[0-6][0-9]{14})|(0*1844[0-5][0-9]{15})|(0*184[0-3][0-9]{16})|(0*18[0-3][0-9]{17})|(0*1[0-7][0-9]{18})|(0*[0-9]{1,19})$"
                        }
                    ]
                }
            },
            "additionalProperties": {
                "type": "string"
            },
            "required": [
                "unsignedLong"
            ]
        },
        "unsignedShortConstant": {
            "title": "16-bit, unsigned, integer, numeric value",
            "description": "Represents 16-bit, unsigned, integer numeric values. Note: it is a well-known problem that different languages represent internally big integer values differently: e.g. JavaScript and Go internally represent these JSON values as integers when they are in the range of [-2^53, 2^53-1] and as double precision values outside of that region. Therefore to avoid ambiguity and loss of fidelity this schema allows the integer values to be expressed also as string values, subject to pattern constrains. Even though the current type of constants fit well in the JavaScript integer range, for consistency this and all integer values can be represented as strings as well.",
            "type": "object",
            "properties": {
                "unsignedShort": {
                    "type": "integer",
                    "minimum": 0,
                    "maximum": 65535
                }
            },
            "additionalProperties": {
                "type": "string"
            },
            "required": [
                "unsignedShort"
            ]
        },
        "dateTimeConstant": {
            "title": "Date and time values",
            "description": "Represents points in time (date and time) as strings following RFC3339 and ISO 8601",
            "type": "object",
            "properties": {
                "dateTime": {
                    "type": "string",
                    "format": "date-time",
                    "pattern": "^[0-9]{4}-(?:0[1-9]|1[0-2])-(?:0[1-9]|[12][0-9]|3[0-1])[T ](?:[01][0-9]|2[0-3]):(?:[0-5][0-9]):(?:[0-5][0-9])(\\.[0-9]+)?(Z|([-+]([01][0-9]|2[0-3])(:?[0-5][0-9])?))$"
                }
            },
            "additionalProperties": {
                "type": "string"
            },
            "required": [
                "dateTime"
            ]
        },
        "dateTimeOffsetConstant": {
            "title": "Date and time values represented as offset from UTC.",
            "description": "Represents points in time (date and time) as strings following RFC3339 and ISO 8601",
            "type": "object",
            "properties": {
                "dateTimeOffset": {
                    "type": "string",
                    "format": "date-time",
                    "pattern": "^[0-9]{4}-(?:0[1-9]|1[0-2])-(?:0[1-9]|[12][0-9]|3[0-1])[T ](?:[01][0-9]|2[0-3]):(?:[0-5][0-9]):(?:[0-5][0-9])(\\.[0-9]+)?(Z|([-+]([01][0-9]|2[0-3])(:?[0-5][0-9])?))$"
                }
            },
            "additionalProperties": {
                "type": "string"
            },
            "required": [
                "dateTimeOffset"
            ]
        },
        "dbNullConstant": {
            "title": "DBNull type",
            "type": "object",
            "properties": {
                "dbNull": {
                    "type": "null",
                    "default": null
                }
            },
            "additionalProperties": {
                "type": "string"
            },
            "required": [
                "dbNull"
            ]
        },
        "decimalConstant": {
            "title": "Represents decimal, fixed point values.",
            "description": "The values can be represented as both numeric and string JSON values.",
            "type": "object",
            "properties": {
                "decimal": {
                    "type": "string",
                    "pattern": "^[-+]?([0-9]+(\\.[0-9]*))|(([0-9]*\\.)?([0-9])+)$"
                }
            },
            "additionalProperties": {
                "type": "string"
            },
            "required": [
                "decimal"
            ]
        },
        "durationConstant": {
            "title": "Time duration values",
            "description": "Represents time duration as strings following ISO 8601.",
            "type": "object",
            "properties": {
                "duration": {
                    "type": "string",
                    "pattern": "^-?P((([0-9]+D)|([0-9]+M)(([0-9]+D))?|([0-9]+Y)(([0-9]+M)(([0-9]+D))?)?)(T((([0-9]+H)(([0-9]+M)(([0-9]+S))?)?|([0-9]+M)(([0-9]+S))?|([0-9]+S))))?|T((([0-9]+H)(([0-9]+M)(([0-9]+S))?)?|([0-9]+M)(([0-9]+S))?|([0-9]+S)))|([0-9]+W))$"
                }
            },
            "additionalProperties": {
                "type": "string"
            },
            "required": [
                "duration"
            ]
        },
        "guidConstant": {
            "title": "UUID (a.k.a. GUID) values",
            "type": "object",
            "properties": {
                "guid": {
                    "type": "string",
                    "format": "uuid",
                    "pattern": "^(?:(?:[\\(\\{]?)[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-[0-9A-Fa-f]{4}-[0-9A-Fa-f]{4}-[0-9A-Fa-f]{12}(?:[\\}\\)]?))|(?:[0-9A-Fa-f]{32})$"
                }
            },
            "additionalProperties": {
                "type": "string"
            },
            "required": [
                "guid"
            ]
        },
        "stringConstant": {
            "title": "Unicode string values",
            "type": "object",
            "properties": {
                "string": {
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null
                }
            },
            "additionalProperties": {
                "type": "string"
            },
            "required": [
                "string"
            ]
        },
        "uriConstant": {
            "title": "URI and IRI values",
            "type": "object",
            "properties": {
                "uri": {
                    "oneOf": [
                        {
                            "type": "string",
                            "format": "iri-reference"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null
                }
            },
            "additionalProperties": {
                "type": "string"
            },
            "required": [
                "uri"
            ]
        },
        "objectConstant": {
            "title": "JSON serialized object",
            "type": "object",
            "properties": {
                "object": {
                    "oneOf": [
                        {
                            "type": "object"
                        },
                        {
                            "$Comment": "Only reference types can have value null.",
                            "type": "null"
                        }
                    ]
                },
                "objectType": {
                    "type": "string"
                },
                "actualType": {
                    "$comment": "The actual type of the object can be different from the declared type if the type of the object is derived from the declared type.",
                    "type": "string"
                }
            },
            "additionalProperties": {
                "type": "string"
            },
            "required": [
                "object",
                "objectType"
            ]
        },
        "anonymousConstant": {
            "title": "JSON serialized anonymous object",
            "type": "object",
            "properties": {
                "anonymous": {
                    "oneOf": [
                        {
                            "type": "object"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null
                },
                "objectType": {
                    "type": "string"
                }
            },
            "additionalProperties": {
                "type": "string"
            },
            "required": [
                "anonymous",
                "objectType"
            ]
        },
        "enumConstant": {
            "title": "Enumeration type",
            "type": "object",
            "properties": {
                "enum": {
                    "type": "object",
                    "properties": {
                        "type": {
                            "type": "string"
                        },
                        "value": {
                            "oneOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    }
                                }
                            ]
                        },
                        "baseType": {
                            "type": "string",
                            "default": "int"
                        },
                        "baseValue": {
                            "type": "integer"
                        }
                    },
                    "additionalProperties": false,
                    "required": [
                        "type",
                        "value"
                    ]
                }
            },
            "additionalProperties": {
                "type": "string"
            },
            "required": [
                "enum"
            ]
        },
        "byteSequenceConstant": {
            "title": "Arbitrary sequence of bytes",
            "description": "This type represents a sequence of bytes Base64 encoded. The value can be a single string or an array of strings. It can be also null.",
            "type": "object",
            "properties": {
                "byteSequence": {
                    "oneOf": [
                        {
                            "type": "string",
                            "contentEncoding": "base64",
                            "contentMediaType": "application/octet-stream"
                        },
                        {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "contentEncoding": "base64",
                                "contentMediaType": "application/octet-stream"
                            }
                        },
                        {
                            "type": "null"
                        }
                    ]
                },
                "objectType": {
                    "type": "string"
                }
            },
            "additionalProperties": {
                "type": "string"
            },
            "required": [
                "byteSequence",
                "objectType"
            ]
        },
        "nullableConstant": {
            "title": "Represents Nullable<> .NET types",
            "type": "object",
            "properties": {
                "nullable": {
                    "oneOf": [
                        {
                            "$ref": "#/$defs/booleanConstant"
                        },
                        {
                            "$ref": "#/$defs/byteConstant"
                        },
                        {
                            "$ref": "#/$defs/charConstant"
                        },
                        {
                            "$ref": "#/$defs/doubleConstant"
                        },
                        {
                            "$ref": "#/$defs/floatConstant"
                        },
                        {
                            "$ref": "#/$defs/halfConstant"
                        },
                        {
                            "$ref": "#/$defs/intConstant"
                        },
                        {
                            "$ref": "#/$defs/intPtrConstant"
                        },
                        {
                            "$ref": "#/$defs/longConstant"
                        },
                        {
                            "$ref": "#/$defs/shortConstant"
                        },
                        {
                            "$ref": "#/$defs/signedByteConstant"
                        },
                        {
                            "$ref": "#/$defs/unsignedIntConstant"
                        },
                        {
                            "$ref": "#/$defs/unsignedIntPtrConstant"
                        },
                        {
                            "$ref": "#/$defs/unsignedLongConstant"
                        },
                        {
                            "$ref": "#/$defs/unsignedShortConstant"
                        },
                        {
                            "$ref": "#/$defs/dateTimeConstant"
                        },
                        {
                            "$ref": "#/$defs/dateTimeOffsetConstant"
                        },
                        {
                            "$ref": "#/$defs/decimalConstant"
                        },
                        {
                            "$ref": "#/$defs/durationConstant"
                        },
                        {
                            "$ref": "#/$defs/guidConstant"
                        },
                        {
                            "$ref": "#/$defs/enumConstant"
                        },
                        {
                            "$comment": "Here we mean only struct object values but JSON wouldn't not understand that.",
                            "$ref": "#/$defs/objectConstant"
                        },
                        {
                            "title": "Null Nullable<T>",
                            "$comment": "Represents a null Nullable<T> value",
                            "type": "object",
                            "properties": {
                                "nil": {
                                    "const": true
                                },
                                "type": {
                                    "type": "string"

                                }
                            },
                            "additionalProperties": {
                                "type": "string"
                            },
                            "required": [
                                "nil",
                                "type"
                            ]
                        }
                    ]
                }
            },
            "required": [
                "nullable"
            ]
        },
        "collectionConstant": {
            "title": "Represents collection (array, list, set, etc.) of values",
            "type": "object",
            "properties": {
                "collection": {
                    "oneOf": [
                        {
                            "type": "array",
                            "items": {
                                "$ref": "#/$defs/constantValue"
                            }
                        },
                        {
                            "type": "null"
                        }
                    ]
                },
                "objectType": {
                    "type": "string"
                },
                "elementType": {
                    "type": "string"
                },
                "length": {
                    "type": "integer"
                }
            },
            "additionalProperties": {
                "type": "string"
            },
            "required": [
                "collection",
                "objectType",
                "elementType"
            ]
        },
        "dictionaryConstant": {
            "title": "Represents a dictionary (hashtable, dictionary, etc.) of key - value pairs",
            "type": "object",
            "properties": {
                "dictionary": {
                    "oneOf": [
                        {
                            "type": "array",
                            "items": {
                                "type": "object",
                                "properties": {
                                    "key": {
                                        "$ref": "#/$defs/constantValue"
                                    },
                                    "value": {
                                        "$ref": "#/$defs/constantValue"
                                    }
                                },
                                "additionalProperties": {
                                    "type": "string"
                                },
                                "required": [
                                    "key",
                                    "value"
                                ]
                            }
                        },
                        {
                            "type": "null"
                        }
                    ]
                },
                "objectType": {
                    "type": "string"
                }
            },
            "additionalProperties": {
                "type": "string"
            },
            "required": [
                "dictionary",
                "objectType"
            ]
        },
        "tupleConstant": {
            "title": "Represents a .NET tuple (Tuple<> or ValueTuple<>)",
            "type": "object",
            "properties": {
                "tuple": {
                    "oneOf": [
                        {
                            "type": "array",
                            "items": {
                                "type": "object",
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "pattern": "^Item[1-9][0-9]*$"
                                    },
                                    "value": {
                                        "$ref": "#/$defs/constantValue"
                                    }
                                },
                                "additionalProperties": {
                                    "type": "string"
                                },
                                "required": [
                                    "name",
                                    "value"
                                ]
                            },
                            "minItems": 1
                        },
                        {
                            "type": "null"
                        }
                    ]
                },
                "objectType": {
                    "type": "string"
                }
            },
            "additionalProperties": {
                "type": "string"
            },
            "required": [
                "tuple",
                "objectType"
            ]
        },
        "constantValue": {
            "title": "Constant value in a LINQ expression.",
            "oneOf": [
                {
                    "$ref": "#/$defs/booleanConstant"
                },
                {
                    "$ref": "#/$defs/byteConstant"
                },
                {
                    "$ref": "#/$defs/charConstant"
                },
                {
                    "$ref": "#/$defs/doubleConstant"
                },
                {
                    "$ref": "#/$defs/floatConstant"
                },
                {
                    "$ref": "#/$defs/halfConstant"
                },
                {
                    "$ref": "#/$defs/intConstant"
                },
                {
                    "$ref": "#/$defs/intPtrConstant"
                },
                {
                    "$ref": "#/$defs/longConstant"
                },
                {
                    "$ref": "#/$defs/shortConstant"
                },
                {
                    "$ref": "#/$defs/signedByteConstant"
                },
                {
                    "$ref": "#/$defs/unsignedIntConstant"
                },
                {
                    "$ref": "#/$defs/unsignedIntPtrConstant"
                },
                {
                    "$ref": "#/$defs/unsignedLongConstant"
                },
                {
                    "$ref": "#/$defs/unsignedShortConstant"
                },
                {
                    "$ref": "#/$defs/dateTimeConstant"
                },
                {
                    "$ref": "#/$defs/dateTimeOffsetConstant"
                },
                {
                    "$ref": "#/$defs/decimalConstant"
                },
                {
                    "$ref": "#/$defs/durationConstant"
                },
                {
                    "$ref": "#/$defs/guidConstant"
                },
                {
                    "$ref": "#/$defs/enumConstant"
                },
                {
                    "$ref": "#/$defs/nullableConstant"
                },
                {
                    "$ref": "#/$defs/stringConstant"
                },
                {
                    "$ref": "#/$defs/dbNullConstant"
                },
                {
                    "$ref": "#/$defs/uriConstant"
                },
                {
                    "$ref": "#/$defs/objectConstant"
                },
                {
                    "$ref": "#/$defs/anonymousConstant"
                },
                {
                    "$ref": "#/$defs/byteSequenceConstant"
                },
                {
                    "$ref": "#/$defs/collectionConstant"
                },
                {
                    "$ref": "#/$defs/dictionaryConstant"
                },
                {
                    "$ref": "#/$defs/tupleConstant"
                },
                {
                    "type": "null"
                }
            ]
        }
    }
}
