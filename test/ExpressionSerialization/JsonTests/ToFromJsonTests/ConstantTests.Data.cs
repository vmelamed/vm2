namespace vm2.ExpressionSerialization.JsonTests.ToFromJsonTests;

public partial class ConstantTests
{
    public static readonly TheoryData<string, string, string> ConstantsData = new ()
    {
        // bool
        { TestLine(), "Bool.false",                                                             "Bool.False" },
        { TestLine(), "Bool.true",                                                              "Bool.True" },
        // byte
        { TestLine(), "Byte.5",                                                                 "Byte" },
        // char
        { TestLine(), "Char.'V'",                                                               "Char" },
#if !JSON_SCHEMA
        // double - see https://github.com/gregsdennis/json-everything/issues/747#issuecomment-2171905465
        { TestLine(), "Double.MinValue",                                                        "Double.MinValue" },
        { TestLine(), "Double.MaxValue",                                                        "Double.MaxValue" },
        { TestLine(), "Double.float.MinValue",                                                  "Double.Float.MinValue" },
        { TestLine(), "Double.float.MaxValue",                                                  "Double.Float.MaxValue" },
        { TestLine(), "Double.BigValue",                                                        "Double.BigValue" },
        { TestLine(), "Double.SmallValue",                                                      "Double.SmallValue" },
#endif
        { TestLine(), "Double.Nan",                                                             "Double.Nan" },
        { TestLine(), "Double.NegativeInfinity",                                                "Double.NegativeInfinity" },
        { TestLine(), "Double.PositiveInfinity",                                                "Double.PositiveInfinity" },
        { TestLine(), "Double.NegativeZero",                                                    "Double.NegativeZero" },
        { TestLine(), "Double.Zero",                                                            "Double.Zero" },
        { TestLine(), "Double.Epsilon",                                                         "Double.Epsilon" },
        { TestLine(), "Double.PI",                                                              "Double.Pi" },
        { TestLine(), "Double.E",                                                               "Double.E" },
        { TestLine(), "Double.-2.234567891233658E-123",                                         "Double.-2.23..E-123" },
        { TestLine(), "Double.5.1234567891234567E-123",                                         "Double.5.12..E-123" },
#if !JSON_SCHEMA
        { TestLine(), "Double.-3.4028234663852886E+38",                                         "Double.3.40..E38" },
        { TestLine(), "Double.3.4028234663852886E+38",                                          "Double.-3.40..E38" },
#endif
        // float
#if !JSON_SCHEMA
        { TestLine(), "Double.float.MinValue",                                                  "Float.MinValue" },
        { TestLine(), "Double.float.MaxValue",                                                  "Float.MaxValue" },
#endif
        { TestLine(), "Float.Nan",                                                              "Float.Nan" },
        { TestLine(), "Float.NegativeInfinity",                                                 "Float.NegativeInfinity" },
        { TestLine(), "Float.PositiveInfinity",                                                 "Float.PositiveInfinity" },
        { TestLine(), "Float.Epsilon",                                                          "Float.Epsilon" },
        { TestLine(), "Float.NegativeZero",                                                     "Float.NegativeZero" },
        { TestLine(), "Float.Zero",                                                             "Float.Zero" },
        { TestLine(), "Float.-2.234568E-23F",                                                   "Float.-2.23..E-23" },
        { TestLine(), "Float.5.5123453E-34F",                                                   "Float.5.51..E-34" },
        // Half
        { TestLine(), "Half.3.14",                                                              "Half" },
        { TestLine(), "Half.E",                                                                 "Half.E" },
        { TestLine(), "Half.MinValue",                                                          "Half.MinValue" },
        { TestLine(), "Half.MaxValue",                                                          "Half.MaxValue" },
        { TestLine(), "Half.Zero",                                                              "Half.Zero" },
        { TestLine(), "Half.One",                                                               "Half.One" },
#if !JSON_SCHEMA
        { TestLine(), "Half.NaN",                                                               "Half.NaN" },  // Jason.Schema doesn't like this either
#endif
        { TestLine(), "Half.NegativeInfinity",                                                  "Half.NegativeInfinity" },
        { TestLine(), "Half.PositiveInfinity",                                                  "Half.PositiveInfinity" },
        { TestLine(), "Half.Pi",                                                                "Half.Pi" },
        { TestLine(), "Half.Epsilon",                                                           "Half.Epsilon" },
        { TestLine(), "Half.NegativeOne",                                                       "Half.NegativeOne" },
        { TestLine(), "Half.NegativeZero",                                                      "Half.NegativeZero" },
        // int
        { TestLine(), "Int.5",                                                                  "Int.5" },
        { TestLine(), "Int.42",                                                                 "Int.42" },
        { TestLine(), "Int.Min",                                                                "Int.Min" },
        { TestLine(), "Int.Max",                                                                "Int.Max" },
        // IntPtr
        { TestLine(), "IntPtr.5",                                                               "IntPtr.5" },
        { TestLine(), "IntPtr.23",                                                              "IntPtr.23" },
        { TestLine(), "IntPtr.MinValue",                                                        "IntPtr.MinValue" },
        { TestLine(), "IntPtr.MaxValue",                                                        "IntPtr.MaxValue" },
        // long
        { TestLine(), "Long.0",                                                                 "Long.0" },
        { TestLine(), "Long.5L",                                                                "Long.5" },
        { TestLine(), "Long.Min",                                                               "Long.Min" },
        { TestLine(), "Long.Max",                                                               "Long.Max" },
        { TestLine(), "Long.IntMin",                                                            "Long.IntMin" },
        { TestLine(), "Long.IntMax",                                                            "Long.IntMax" },
        { TestLine(), "Long.IntMin-1",                                                          "Long.IntMin-1" },
        { TestLine(), "Long.IntMax+1",                                                          "Long.IntMax+1" },
        { TestLine(), "Long.IntMin+1",                                                          "Long.IntMin+1" },
        { TestLine(), "Long.IntMax-1",                                                          "Long.IntMax-1" },
        // sbyte
        { TestLine(), "Sbyte.5",                                                                "SignedByte.5"},
        { TestLine(), "Sbyte.-5",                                                               "SignedByte.-5"},
        { TestLine(), "Sbyte.MinValue",                                                         "SignedByte.MinValue"},
        { TestLine(), "Sbyte.MaxValue",                                                         "SignedByte.MaxValue"},
        // short
        { TestLine(), "Short.32000",                                                            "Short"},
        { TestLine(), "Short.MinValue",                                                         "Short.MinValue"},
        { TestLine(), "Short.MaxValue",                                                         "Short.MaxValue"},
        // uint
        { TestLine(), "Uint.0",                                                                 "UnsignedInt.0"},
        { TestLine(), "Uint.5",                                                                 "UnsignedInt.5"},
        { TestLine(), "Uint.42",                                                                "UnsignedInt.42"},
        { TestLine(), "Uint.Min",                                                               "UnsignedInt.Min"},
        { TestLine(), "Uint.Max",                                                               "UnsignedInt.Max"},
        // UIntPtr
        { TestLine(), "UnsignedIntPtr.5",                                                       "UnsignedIntPtr.5"},
        { TestLine(), "UnsignedIntPtr.42",                                                      "UnsignedIntPtr.42"},
        { TestLine(), "UnsignedIntPtr.MinValue",                                                "UnsignedIntPtr.MinValue"},
        { TestLine(), "UnsignedIntPtr.MaxValue",                                                "UnsignedIntPtr.MaxValue"},
        // ulong
        { TestLine(), "Ulong.0",                                                                "UnsignedLong.0"},
        { TestLine(), "Ulong.5",                                                                "UnsignedLong.5"},
        { TestLine(), "Ulong.Min",                                                              "UnsignedLong.Min"},
        { TestLine(), "Ulong.Max",                                                              "UnsignedLong.Max"},
        { TestLine(), "Ulong.IntMax-1",                                                         "UnsignedLong.IntMax-1"},
        { TestLine(), "Ulong.IntMax",                                                           "UnsignedLong.IntMax"},
        { TestLine(), "Ulong.IntMax+1",                                                         "UnsignedLong.IntMax+1"},
        // ushort
        { TestLine(), "Ushort.5",                                                               "UnsignedShort.5"},
        { TestLine(), "Ushort.443",                                                             "UnsignedShort.443"},
        { TestLine(), "Ushort.MinValue",                                                        "UnsignedShort.MinValue"},
        { TestLine(), "Ushort.MaxValue",                                                        "UnsignedShort.MaxValue"},
        // DateTime
        { TestLine(), "DateTime.MinValue",                                                      "DateTime.MinValue" },
        { TestLine(), "DateTime.MaxValue",                                                      "DateTime.MaxValue" },
        { TestLine(), "DateTime(2024, 4, 13, 23, 18, 26, 234, DateTimeKind.Local)",             "DateTime" },
        { TestLine(), "DateTime(2024, 4, 13, 23, 18, 26, 234)",                                 "DateTime.Local" },
        // DateTimeOffsEt
        { TestLine(), "DateTimeOffset.MinValue",                                                "DateTimeOffset.MinValue" },
        { TestLine(), "DateTimeOffset.MaxValue",                                                "DateTimeOffset.MaxValue" },
        { TestLine(), "DateTimeOffset(2024, 4, 13, 23, 18, 26, 234, new TimeSpan(0, -300, 0))", "DateTimeOffset" },
        // TimeSpan
        { TestLine(), "TimeSpan.MinValue",                                                      "TimeSpan.MinValue" },
        { TestLine(), "TimeSpan.MaxValue",                                                      "TimeSpan.MaxValue" },
        { TestLine(), "TimeSpan.Zero",                                                          "TimeSpan.Zero" },
        { TestLine(), "TimeSpan(3, 4, 15, 32, 123)",                                            "TimeSpan" },
        { TestLine(), "TimeSpan(-3, 4, 15, 32, 123)",                                           "TimeSpan-" },
        // DBNull
        { TestLine(), "DBNull.Value",                                                           "DBNull" },
        // decimal
        { TestLine(), "Decimal.Zero",                                                           "Decimal.Zero" },
        { TestLine(), "Decimal.MinusOne",                                                       "Decimal.MinusOne" },
        { TestLine(), "Decimal.One",                                                            "Decimal.One" },
        { TestLine(), "Decimal.MinValue",                                                       "Decimal.MinValue" },
        { TestLine(), "Decimal.MaxValue",                                                       "Decimal.MaxValue" },
        { TestLine(), "5.5M",                                                                   "Decimal" },
        // GUID
        { TestLine(), "Guid.Empty",                                                             "Guid.Empty" },
        { TestLine(), "Guid(\"00112233-4455-6677-8899-aabbccddeeff\")",                         "Guid" },
        // string
        { TestLine(), "String.Empty",                                                           "String.string.Empty" },
        { TestLine(), "String.null",                                                            "String.string.null" },
        { TestLine(), "String.abrah-cadabrah",                                                  "String.abrah-cadabrah" },
        { TestLine(), "String.ала-бала",                                                        "String.ала-бала" },
        // Uri
        { TestLine(), "Uri(\"http://www.acme.com\")",                                           "Uri" },
        // enum
        { TestLine(), "EnumFlagsTest.One | EnumFlagsTest.Three",                                "EnumFlags" },
        { TestLine(), "EnumTest.Three",                                                         "Enum" },
        // nullable primitive
        { TestLine(), "Nullable.int.5",                                                         "Nullable.Int.5" },
        { TestLine(), "Nullable.int.null",                                                      "Nullable.Int.Null" },
        { TestLine(), "Nullable.long.5L",                                                       "Nullable.Long.5" },
        { TestLine(), "Nullable.long.null",                                                     "Nullable.Long.Null" },
        { TestLine(), "Nullable.long.long.Min",                                                 "Nullable.Long.Min" },
        { TestLine(), "Nullable.long.long.Max",                                                 "Nullable.Long.Max" },
        { TestLine(), "Nullable.long.long.IntMin",                                              "Nullable.Long.IntMin" },
        { TestLine(), "Nullable.long.long.IntMax",                                              "Nullable.Long.IntMax" },
        { TestLine(), "Nullable.long.long.IntMin-1",                                            "Nullable.Long.IntMin-1" },
        { TestLine(), "Nullable.long.long.IntMax+1",                                            "Nullable.Long.IntMax+1" },
        { TestLine(), "Nullable.long.long.IntMin+1",                                            "Nullable.Long.IntMin+1" },
        { TestLine(), "Nullable.long.long.IntMax-1",                                            "Nullable.Long.IntMax-1" },
        // objects
        { TestLine(), "Object.null",                                                            "Object.Null" },
        { TestLine(), "Object()",                                                               "Object" },
        { TestLine(), "Object1()",                                                              "Object1" },
        { TestLine(), "Object1.null",                                                           "Object1.Null" },
        { TestLine(), "ClassDataContract1()",                                                   "Object.ClassDataContract1" },
        { TestLine(), "ClassDataContract2()",                                                   "Object.ClassDataContract2" },
        { TestLine(), "ClassSerializable1()",                                                   "Object.ClassSerializable1" },
        // structs
        { TestLine(), "StructDataContract1.null",                                               "Struct.NullableStructDataContract1.Null" },
        { TestLine(), "StructDataContract1() { IntProperty = 7, StringProperty = \"vm\" }",     "Struct.StructDataContract1-2" },
        { TestLine(), "StructDataContract1()",                                                  "Struct.StructDataContract1" },
        { TestLine(), "StructDataContract1?() { IntProperty = 7, StringProperty = \"vm\" }",    "Struct.NullableStructDataContract1" },
        { TestLine(), "(StructSerializable1?)null",                                             "Struct.NullableStructSerializable1.Null" },
        { TestLine(), "StructSerializable1() { IntProperty = 7, StringProperty = \"vm\" }",     "Struct.NullableStructSerializable1" },
        { TestLine(), "StructSerializable1()",                                                  "Struct.StructSerializable1" },
        // anonymous
        { TestLine(), "Anonymous",                                                              "Anonymous" },
        // byte sequences
        { TestLine(), "Bytes.(byte[])null",                                                     "Bytes.Array.Null" },
        { TestLine(), "Bytes.byte[]{}",                                                         "Bytes.Array.Empty" },
        { TestLine(), "Bytes.Memory<byte>()",                                                   "Bytes.Memory.Empty" },
        { TestLine(), "Bytes.ReadOnlyMemory<byte>()",                                           "Bytes.ReadOnlyMemory.Empty" },
        { TestLine(), "Bytes.ArraySegment<byte>([])",                                           "Bytes.ArraySegment.Empty" },
        { TestLine(), "Bytes.byte[]{ 1, 2, 3, 1, 2, 3, 1, 2, 3, 10 }",                          "Bytes.Array" },
        { TestLine(), "Bytes.Memory<byte>([1, 2, 3, 1, 2, 3, 1, 2, 3, 10 ])",                   "Bytes.Memory" },
        { TestLine(), "Bytes.ReadOnlyMemory<byte>([1, 2, 3, 1, 2, 3, 1, 2, 3, 10 ])",           "Bytes.ReadOnlyMemory" },
        { TestLine(), "Bytes.ArraySegment<byte>([1, 2, 3, 1, 2, 3, 1, 2, 3, 10], 1, 8)",        "Bytes.ArraySegment" },
        // sequences
        { TestLine(), "Ints.(int[])null",                                                       "Array.Int.Null" },
        { TestLine(), "Ints.int[]{}",                                                           "Array.Int.Empty" },
        { TestLine(), "Ints.int[]{ 1, 2, 3, 4 }",                                               "Array.Int" },
        { TestLine(), "Ints.(int?[])null",                                                      "Array.NullableInt.Null" },
        { TestLine(), "Ints.int?[]{}",                                                          "Array.NullableInt.Empty" },
        { TestLine(), "Ints.int?[]{ 1, 2, null, null }",                                        "Array.NullableInt" },
        { TestLine(), "Ints.Memory<int>(null)",                                                 "Memory.Int.Null" },
        { TestLine(), "Ints.Memory<int>()",                                                     "Memory.Int.Empty" },
        { TestLine(), "Ints.Memory<int>([ 1, 2, 3, 4 ])",                                       "Memory.Int" },
        { TestLine(), "Ints.(Memory<int>?)null",                                                "Memory.Int0.Null" },
        { TestLine(), "Ints.(Memory<int>?)()",                                                  "Memory.Int0.Empty" },
        { TestLine(), "Ints.(Memory<int>?)([ 1, 2, 3, 4 ])",                                    "Memory.Int0" },
        { TestLine(), "EnumTest?[]{ EnumTest.One, EnumTest.Two, null, null }",                  "Array.NullableEnums" },
        { TestLine(), "EnumTest?[].null",                                                       "Array.NullableEnums.Null" },
        { TestLine(), "ArraySegment<int>([ 1, 2, 3, 4 ], 1, 2)",                                "ArraySegment.Int" },
        { TestLine(), "List<int>([1, 2, 3, 4])",                                                "List.Int" },
        { TestLine(), "List<int?>{ 1, 2, null, null }",                                         "List.NullableInt" },
        { TestLine(), "List<int?>.null",                                                        "List.NullableInt.Null" },
        { TestLine(), "LinkedList<int>([1, 2, 3, 4])",                                          "LinkedList.Int" },
        { TestLine(), "Sequence<int>([1, 2, 3, 4])",                                            "Collection.Int" },
        { TestLine(), "ReadOnlyCollection<int>([1, 2, 3, 4])",                                  "ReadOnlyCollection.Int" },
        { TestLine(), "ReadOnlyMemory<int>([ 1, 2, 3, 4 ])",                                    "ReadOnlyMemory.Int" },
        { TestLine(), "HashSet<int>([1, 2, 3, 4])",                                             "HashSet.Int" },
        { TestLine(), "SortedSet<int>([1, 2, 3, 4])",                                           "SortedSet.Int" },
        { TestLine(), "Queue<int>([1, 2, 3, 4])",                                               "Queue.Int" },
        { TestLine(), "Stack<int>([1, 2, 3, 4])",                                               "Stack.Int" },
        { TestLine(), "BlockingCollection<double>()",                                           "BlockingCollection" },
        { TestLine(), "ConcurrentBag<int>([1, 2, 3, 4])",                                       "ConcurrentBag.Int" },
        { TestLine(), "ConcurrentQueue<int>([1, 2, 3, 4])",                                     "ConcurrentQueue.Int" },
        { TestLine(), "ConcurrentStack<int>([1, 2, 3, 4])",                                     "ConcurrentStack.Int" },
        { TestLine(), "ImmutableArray.Create()",                                                "ImmutableSet.Int.Empty" },
        { TestLine(), "ImmutableArray.Create(1, 2, 3, 4 )",                                     "ImmutableSet.Int" },
        { TestLine(), "ImmutableHashSet.Create(1, 2, 3, 4 )",                                   "ImmutableHashSet.Int" },
        { TestLine(), "ImmutableList.Create(1, 2, 3, 4 )",                                      "ImmutableList.Int" },
        { TestLine(), "ImmutableQueue.Create(1, 2, 3, 4 )",                                     "ImmutableQueue.Int" },
        { TestLine(), "ImmutableSortedSet.Create(1, 2, 3, 4 )",                                 "ImmutableSortedSet.Int" },
        { TestLine(), "ImmutableStack.Create(1, 2, 3, 4 )",                                     "ImmutableStack.Int" },
        { TestLine(), "ClassDataContract1[] { new ClassDataContract1()...",                     "Array.ClassDataContract1and2" },
        { TestLine(), "ClassDataContract1[] { new(0, \"vm\"), new(1, \"vm2 vm\"), }",           "Array.ClassDataContract1" },
        { TestLine(), "Frozen.byte[]{}",                                                        "Bytes.Empty.SetFrozen" },
        { TestLine(), "Frozen.byte[]{ 1, 2, 3, 1, 2, 3, 1, 2, 3, 10 }",                         "Bytes.SetFrozen" },
        { TestLine(), "Frozen.int[]{ 1, 2, 3, 4 }",                                             "FrozenSet.Int" },
        { TestLine(), "Frozen.int?[]{ 1, 2, null, null }",                                      "FrozenSet.NullableInt" },
        { TestLine(), "Frozen.decimal[]{ 1, 2, 3, 4 }",                                         "FrozenSet.Decimal" },
        { TestLine(), "Frozen.EnumTest?[]{ EnumTest.One, EnumTest.Two, null, null }",           "FrozenSet.NullableEnums" },
        { TestLine(), "Frozen.anonymous[]",                                                     "FrozenSet.Anonymous" },
        // tuples
        { TestLine(), "Tuple.(Tuple<int, string>)null",                                         "Tuple.Int.String.Null" },
        { TestLine(), "Tuple.Tuple<int, string>",                                               "Tuple.Int.String" },
        { TestLine(), "Tuple.ValueTuple<int, string>",                                          "TupleValue.Int.String" },
        { TestLine(), "Tuple.Tuple<int, String, StructDataContract1>",                          "Tuple.Int.String.Struct" },
        { TestLine(), "Tuple.ValueTuple<int, String, StructDataContract1>",                     "TupleValue.Int.String.Struct" },
        // dictionaries
        { TestLine(), "Dictionary<int, string?>{ [1] = \"one\", [2] = \"two\"...",              "Dictionary.Int.NullableString" },
        { TestLine(), "Dictionary<int, string>{ [1] = \"one\", [2] = \"two\" }",                "Dictionary.Int.String" },
        { TestLine(), "Frozen.Dictionary<int, string?>...",                                     "Frozen.Dictionary.Int.NullableString" },
        { TestLine(), "Frozen.Dictionary<int, string>...",                                      "Frozen.Dictionary.Int.String" },
        { TestLine(), "Hashtable(new Dictionary<int, string>{ [1] =\"one\", [2]=\"two\" })",    "Hashtable" },
        { TestLine(), "ImmutableDictionary.Create<int,string>().Add(...)",                      "Immutable.Dictionary.Int.String" },
        { TestLine(), "ImmutableSortedDictionary.Create<int,string>().Add(...)",                "Immutable.SortedDictionary.Int.String" },
        { TestLine(), "ReadOnlyDictionary<int, string>...",                                     "ReadOnly.Dictionary.Int.String" },
        { TestLine(), "SortedDictionary<int, string>{ [1] =\"one\", [2]=\"two\" }",             "SortedDictionary.Int.String" },
        { TestLine(), "ConcurrentDictionary<int, string>{ [1] = \"one\", [2]=\"two\" }",        "Concurrent.Dictionary.Int.String" },

        { TestLine(), "StructDataContract1[]",                                                  "Array.StructDataContract1" },
        { TestLine(), "StructDataContract1?[]",                                                 "Array.NullableStructDataContract1" },
        { TestLine(), "StructSerializable1[]",                                                  "Array.StructSerializable1" },
        { TestLine(), "StructSerializable1?[]",                                                 "Array.NullableStructSerializable1" },
    };
}
