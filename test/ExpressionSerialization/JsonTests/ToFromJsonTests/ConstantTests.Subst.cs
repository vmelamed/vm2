namespace vm2.ExpressionSerialization.JsonTests.ToFromJsonTests;

public partial class ConstantTests
{
    static Dictionary<string, ConstantExpression> _substitutes = new()
    {
        ["false"]                                                                               = Expression.Constant(false),
        ["true"]                                                                                = Expression.Constant(true),
        ["(byte)5"]                                                                             = Expression.Constant((byte)5),
        ["'V'"]                                                                                 = Expression.Constant('V'),
        ["Math.PI"]                                                                             = Expression.Constant(Math.PI),
        ["Math.E"]                                                                              = Expression.Constant(Math.E),
        ["-2.234567891233658E-123"]                                                             = Expression.Constant(-2.234567891233658E-123),
        ["-2.234568E-23F"]                                                                      = Expression.Constant(-2.234568E-23F),
        ["5.1234567891234567E-123"]                                                             = Expression.Constant(5.1234567891234567E-123),
        ["5.5123453E-34F"]                                                                      = Expression.Constant(5.5123453E-34F),
        ["5"]                                                                                   = Expression.Constant(5),
        ["42"]                                                                                  = Expression.Constant(42),
        ["int.Min"]                                                                             = Expression.Constant(int.MinValue),
        ["int.Max"]                                                                             = Expression.Constant(int.MaxValue),
        ["IntPtr5"]                                                                             = Expression.Constant((IntPtr)5),
        ["IntPtr23"]                                                                            = Expression.Constant((IntPtr)23),
        ["long0"]                                                                               = Expression.Constant(0L),
        ["5L"]                                                                                  = Expression.Constant(5L),
        ["long.Min"]                                                                            = Expression.Constant(long.MinValue),
        ["long.Max"]                                                                            = Expression.Constant(long.MaxValue),
        ["long.IntMin"]                                                                         = Expression.Constant(ToJsonDataTransform.MinJsonInteger),
        ["long.IntMax"]                                                                         = Expression.Constant(ToJsonDataTransform.MaxJsonInteger),
        ["long.IntMin-1"]                                                                       = Expression.Constant(ToJsonDataTransform.MinJsonInteger-1),
        ["long.IntMax+1"]                                                                       = Expression.Constant(ToJsonDataTransform.MaxJsonInteger+1),
        ["long.IntMin+1"]                                                                       = Expression.Constant(ToJsonDataTransform.MinJsonInteger+1),
        ["long.IntMax-1"]                                                                       = Expression.Constant(ToJsonDataTransform.MaxJsonInteger-1),
        ["(sbyte)5"]                                                                            = Expression.Constant((sbyte)5),
        ["(sbyte)-5"]                                                                           = Expression.Constant((sbyte)-5),
        ["(short)32000"]                                                                        = Expression.Constant((short)32000),
        ["(uint)5"]                                                                             = Expression.Constant((uint)5),
        ["(uint)42"]                                                                            = Expression.Constant((uint)42),
        ["uint.Min"]                                                                            = Expression.Constant(uint.MinValue),
        ["uint.Max"]                                                                            = Expression.Constant(uint.MaxValue),
        ["(UnsignedIntPtr)5"]                                                                   = Expression.Constant((UIntPtr)5),
        ["(UnsignedIntPtr)42"]                                                                  = Expression.Constant((UIntPtr)42),
        ["ulong0"]                                                                              = Expression.Constant(0UL),
        ["(ulong)5"]                                                                            = Expression.Constant((ulong)5),
        ["ulong.Min"]                                                                           = Expression.Constant(ulong.MinValue),
        ["ulong.Max"]                                                                           = Expression.Constant(ulong.MaxValue),
        ["ulong.IntMax-1"]                                                                      = Expression.Constant((ulong)ToJsonDataTransform.MaxJsonInteger-1),
        ["ulong.IntMax"]                                                                        = Expression.Constant((ulong)ToJsonDataTransform.MaxJsonInteger),
        ["ulong.IntMax+1"]                                                                      = Expression.Constant((ulong)ToJsonDataTransform.MaxJsonInteger+1),
        ["(ushort)5"]                                                                           = Expression.Constant((ushort)5),
        ["(ushort)443"]                                                                         = Expression.Constant((ushort)443),

        ["DateTime(2024, 4, 13, 23, 18, 26, 234, DateTimeKind.Local)"]                          = Expression.Constant(new DateTime(2024, 4, 13, 23, 18, 26, 234, DateTimeKind.Local)),
        ["DateTimeOffset(2024, 4, 13, 23, 18, 26, 234, new TimeSpan(0, -300, 0))"]              = Expression.Constant(new DateTimeOffset(2024, 4, 13, 23, 18, 26, 234, new TimeSpan(0, -300, 0))),
        ["TimeSpan(3, 4, 15, 32, 123)"]                                                         = Expression.Constant(new TimeSpan(3, 4, 15, 32, 123)),
        ["TimeSpan(-3, 4, 15, 32, 123)"]                                                        = Expression.Constant(new TimeSpan(3, 4, 15, 32, 123).Negate()),
        ["DBNull.Value"]                                                                        = Expression.Constant(DBNull.Value),
        ["5.5M"]                                                                                = Expression.Constant(5.5M),
        ["Guid(\"00112233-4455-6677-8899-aabbccddeeff\")"]                                      = Expression.Constant(new Guid("00112233-4455-6677-8899-aabbccddeeff")),
        ["(Half)3.14"]                                                                          = Expression.Constant((Half)3.14),
        ["abrah-cadabrah"]                                                                      = Expression.Constant("abrah-cadabrah"),
        ["Uri(\"http://www.delinea.com\")"]                                                     = Expression.Constant(new Uri("http://www.delinea.com")),

        ["EnumFlagsTest.One | EnumFlagsTest.Three"]                                             = Expression.Constant(EnumFlagsTest.One | EnumFlagsTest.Three),
        ["EnumTest.Three"]                                                                      = Expression.Constant(EnumTest.Three),

        ["(int?)5"]                                                                             = Expression.Constant(5, typeof(int?)),
        ["(int?)null"]                                                                          = Expression.Constant(null, typeof(int?)),
        ["(long?)5L"]                                                                           = Expression.Constant(5L, typeof(long?)),
        ["(long?)null"]                                                                         = Expression.Constant(null, typeof(long?)),
        ["(long?)long.Min"]                                                                     = Expression.Constant(long.MinValue, typeof(long?)),
        ["(long?)long.Max"]                                                                     = Expression.Constant(long.MaxValue, typeof(long?)),
        ["(long?)long.IntMin"]                                                                  = Expression.Constant(ToJsonDataTransform.MinJsonInteger, typeof(long?)),
        ["(long?)long.IntMax"]                                                                  = Expression.Constant(ToJsonDataTransform.MaxJsonInteger, typeof(long?)),
        ["(long?)long.IntMin-1"]                                                                = Expression.Constant(ToJsonDataTransform.MinJsonInteger-1, typeof(long?)),
        ["(long?)long.IntMax+1"]                                                                = Expression.Constant(ToJsonDataTransform.MaxJsonInteger+1, typeof(long?)),
        ["(long?)long.IntMin+1"]                                                                = Expression.Constant(ToJsonDataTransform.MinJsonInteger+1, typeof(long?)),
        ["(long?)long.IntMax-1"]                                                                = Expression.Constant(ToJsonDataTransform.MaxJsonInteger-1, typeof(long?)),

        ["(IntField: 1, StringField: \"one\")"]                                                 = Expression.Constant((IntField: 1, StringField: "one")),
        ["(StructDataContract1)null"]                                                           = Expression.Constant(null, typeof(StructDataContract1?)),
        ["(StructSerializable1)null"]                                                           = Expression.Constant(null, typeof(StructSerializable1?)),

        ["(Object1)null"]                                                                       = Expression.Constant(null, typeof(Object1)),
        ["anonymous"]                                                                           = Expression.Constant(
                                                                                                                        new
                                                                                                                        {
                                                                                                                            ObjectProperty = (object?)null,
                                                                                                                            NullIntProperty = (int?)null,
                                                                                                                            NullLongProperty = (long?)1L,
                                                                                                                            BoolProperty = true,
                                                                                                                            CharProperty = 'A',
                                                                                                                            ByteProperty = (byte)1,
                                                                                                                            SByteProperty = (sbyte)1,
                                                                                                                            ShortProperty = (short)1,
                                                                                                                            IntProperty = 1,
                                                                                                                            LongProperty = (long)1,
                                                                                                                            UShortProperty = (ushort)1,
                                                                                                                            UIntProperty = (uint)1,
                                                                                                                            ULongProperty = (ulong)1,
                                                                                                                            DoubleProperty = 1.0,
                                                                                                                            FloatProperty = (float)1.0,
                                                                                                                            DecimalProperty = 1M,
                                                                                                                            GuidProperty = Guid.Empty,
                                                                                                                            UriProperty = new Uri("http://localhost"),
                                                                                                                            DateTimeProperty = new DateTime(2013, 1, 13),
                                                                                                                            TimeSpanProperty = new TimeSpan(123L),
                                                                                                                            DateTimeOffsetProperty = new DateTimeOffset(new DateTime(2013, 1, 13)),
                                                                                                                        }),
        ["ArraySegment<byte>"]                                                                  = Expression.Constant(new ArraySegment<byte>([1, 2, 3, 1, 2, 3, 1, 2, 3, 10], 1, 8)),
        ["ArraySegment<int>([ 1, 2, 3, 4 ], 1, 2)"]                                             = Expression.Constant(new ArraySegment<int>([ 1, 2, 3, 4 ], 1, 2)),
        ["EnumTest?[]{ EnumTest.One, EnumTest.Two, null, null }"]                               = Expression.Constant(new EnumTest?[]{ EnumTest.One, EnumTest.Two, null, null }),
        ["BlockingCollection<double>()"]                                                        = Expression.Constant(new BlockingCollection<double>() { Math.PI, Math.Tau, Math.E }),
        ["byte[]{ 1, 2, 3, 1, 2, 3, 1, 2, 3, 10 }"]                                             = Expression.Constant(new byte[]{ 1, 2, 3, 1, 2, 3, 1, 2, 3, 10 }),
        ["ClassDataContract1()"]                                                                = Expression.Constant(new ClassDataContract1()),
        ["ClassDataContract1[] { new ClassDataContract1()..."]                                  = Expression.Constant(new ClassDataContract1?[] { new(), new ClassDataContract2(), null }),
        ["ClassDataContract1[] { new(0, \"vm\"), new(1, \"vm2 vm\"), }"]                        = Expression.Constant(new ClassDataContract1[] { new(0, "vm"), new(1, "vm2 vm"), }),
        ["ClassDataContract2()"]                                                                = Expression.Constant(new ClassDataContract2(1, "two", 3M), typeof(ClassDataContract1)),
        ["ClassSerializable1()"]                                                                = Expression.Constant(new ClassSerializable1()),
        ["Collection<int>([1, 2, 3, 4])"]                                                       = Expression.Constant(new Collection<int>([1, 2, 3, 4])),
        ["ConcurrentBag<int>([1, 2, 3, 4])"]                                                    = Expression.Constant(new ConcurrentBag<int>([1, 2, 3, 4])),
        ["ConcurrentDictionary<int, string>{ [1] = \"one\", [2]=\"two\" }"]                     = Expression.Constant(new ConcurrentDictionary<int, string>{ [1] ="one", [2]="two" }),
        ["ConcurrentQueue<int>([1, 2, 3, 4])"]                                                  = Expression.Constant(new ConcurrentQueue<int>([1, 2, 3, 4])),
        ["ConcurrentStack<int>([1, 2, 3, 4])"]                                                  = Expression.Constant(new ConcurrentStack<int>([1, 2, 3, 4])),
        ["Dictionary<int, string?>{ [1] = \"one\", [2] = \"two\"..."]                           = Expression.Constant(new Dictionary<int, string?>{ [1] = "one", [2] = "two", [3] = null, [4] = null }),
        ["Dictionary<int, string>{ [1] = \"one\", [2] = \"two\", [3]..."]                       = Expression.Constant(new Dictionary<int, string>{ [1] = "one", [2] = "two", [3] = "three", }),
        ["Dictionary<int, string>{ [1] =\"one\", [2]=\"two\" }"]                                = Expression.Constant(new Dictionary<int, string>{ [1] ="one", [2]="two" }),
        ["Frozen byte[]{ 1, 2, 3, 1, 2, 3, 1, 2, 3, 10 }"]                                      = Expression.Constant(new byte[]{ 1, 2, 3, 1, 2, 3, 1, 2, 3, 10 }.ToFrozenSet()),
        ["Frozen decimal[]{ 1, 2, 3, 4 }"]                                                      = Expression.Constant(new decimal[]{ 1, 2, 3, 4 }.ToFrozenSet()),
        ["Frozen Dictionary<int, string?>..."]                                                  = Expression.Constant(new Dictionary<int, string?>{ [1] = "one", [2] = "two", [3] = null, [4] = null }.ToFrozenDictionary()),
        ["Frozen Dictionary<int, string>..."]                                                   = Expression.Constant(new Dictionary<int, string>{ [1] = "one", [2] = "two", [3] = "three", }.ToFrozenDictionary()),
        ["Frozen EnumTest?[]{ EnumTest.One, EnumTest.Two, null, null }"]                        = Expression.Constant(new EnumTest?[]{ EnumTest.One, EnumTest.Two, null, null }.ToFrozenSet()),
        ["Frozen int?[]{ 1, 2, null, null }"]                                                   = Expression.Constant(new int?[]{ 1, 2, null, null }.ToFrozenSet()),
        ["Frozen int[]{ 1, 2, 3, 4 }"]                                                          = Expression.Constant(new int[]{ 1, 2, 3, 4 }.ToFrozenSet()),
        ["Frozen object[anonymous]"]                                                            = Expression.Constant(new object?[] {
                                                                                                                        new
                                                                                                                        {
                                                                                                                            ObjectProperty = (object?)null,
                                                                                                                            NullIntProperty = (int?)null,
                                                                                                                            NullLongProperty = (long?)1L,
                                                                                                                            BoolProperty = true,
                                                                                                                            CharProperty = 'A',
                                                                                                                            ByteProperty = (byte)1,
                                                                                                                            SByteProperty = (sbyte)1,
                                                                                                                            ShortProperty = (short)1,
                                                                                                                            IntProperty = 1,
                                                                                                                            LongProperty = (long)1,
                                                                                                                            UShortProperty = (ushort)1,
                                                                                                                            UIntProperty = (uint)1,
                                                                                                                            ULongProperty = (ulong)1,
                                                                                                                            DoubleProperty = 1.0,
                                                                                                                            FloatProperty = (float)1.0,
                                                                                                                            DecimalProperty = 1M,
                                                                                                                            GuidProperty = Guid.Empty,
                                                                                                                            UriProperty = new Uri("http://localhost"),
                                                                                                                            DateTimeProperty = new DateTime(2013, 1, 13),
                                                                                                                            TimeSpanProperty = new TimeSpan(123L),
                                                                                                                            DateTimeOffsetProperty = new DateTimeOffset(new DateTime(2013, 1, 13)),
                                                                                                                        },
                                                                                                                        new
                                                                                                                        {
                                                                                                                            ObjectProperty = (object?)null,
                                                                                                                            NullIntProperty = (int?)null,
                                                                                                                            NullLongProperty = (long?)2L,
                                                                                                                            BoolProperty = true,
                                                                                                                            CharProperty = 'A',
                                                                                                                            ByteProperty = (byte)2,
                                                                                                                            SByteProperty = (sbyte)2,
                                                                                                                            ShortProperty = (short)2,
                                                                                                                            IntProperty = 2,
                                                                                                                            LongProperty = (long)2,
                                                                                                                            UShortProperty = (ushort)2,
                                                                                                                            UIntProperty = (uint)2,
                                                                                                                            ULongProperty = (ulong)2,
                                                                                                                            DoubleProperty = 2.0,
                                                                                                                            FloatProperty = (float)2.0,
                                                                                                                            DecimalProperty = 2M,
                                                                                                                            GuidProperty = Guid.Empty,
                                                                                                                            UriProperty = new Uri("http://localhost"),
                                                                                                                            DateTimeProperty = new DateTime(2013, 2, 13),
                                                                                                                            TimeSpanProperty = new TimeSpan(123L),
                                                                                                                            DateTimeOffsetProperty = new DateTimeOffset(new DateTime(2013, 2, 13)),
                                                                                                                        },
                                                                                                                        null
                                                                                                                    }.ToFrozenSet()),
        ["HashSet<int>([1, 2, 3, 4])"]                                                          = Expression.Constant(new HashSet<int>([1, 2, 3, 4])),
        ["Hashtable(new Dictionary<int, string>{ [1] =\"one\", [2]=\"two\" })"]                 = Expression.Constant(new Hashtable(new Dictionary<int, string>{ [1] ="one", [2]="two" })),
        ["ImmutableArray.Create(1, 2, 3, 4 )"]                                                  = Expression.Constant(ImmutableArray.Create(1, 2, 3, 4 )),
        ["ImmutableDictionary.Create<int,string>().Add(...)"]                                   = Expression.Constant(ImmutableDictionary.Create<int,string>().Add(1, "one").Add(2, "two")),
        ["ImmutableHashSet.Create(1, 2, 3, 4 )"]                                                = Expression.Constant(ImmutableHashSet.Create(1, 2, 3, 4 )),
        ["ImmutableList.Create(1, 2, 3, 4 )"]                                                   = Expression.Constant(ImmutableList.Create(1, 2, 3, 4 )),
        ["ImmutableQueue.Create(1, 2, 3, 4 )"]                                                  = Expression.Constant(ImmutableQueue.Create(1, 2, 3, 4 )),
        ["ImmutableSortedDictionary.Create<int,string>().Add(...)"]                             = Expression.Constant(ImmutableSortedDictionary.Create<int,string>().Add(1, "one").Add(2, "two")),
        ["ImmutableSortedSet.Create(1, 2, 3, 4 )"]                                              = Expression.Constant(ImmutableSortedSet.Create(1, 2, 3, 4 )),
        ["ImmutableStack.Create(1, 2, 3, 4 )"]                                                  = Expression.Constant(ImmutableStack.Create(1, 2, 3, 4 )),
        ["int?[]{ 1, 2, null, null }"]                                                          = Expression.Constant(new int?[]{ 1, 2, null, null }),
        ["int[]{ 1, 2, 3, 4 }"]                                                                 = Expression.Constant(new int[]{ 1, 2, 3, 4 }),
        ["LinkedList<int>([1, 2, 3, 4])"]                                                       = Expression.Constant(new LinkedList<int>([1, 2, 3, 4])),
        ["List<int?>{ 1, 2, null, null }"]                                                      = Expression.Constant(new List<int?>{ 1, 2, null, null }),
        ["List<int>([1, 2, 3, 4])"]                                                             = Expression.Constant(new List<int>([1, 2, 3, 4])),
        ["Memory<byte>([1, 2, 3, 1, 2, 3, 1, 2, 3, 10 ])"]                                      = Expression.Constant(new Memory<byte>([1, 2, 3, 1, 2, 3, 1, 2, 3, 10 ])),
        ["Memory<int>([ 1, 2, 3, 4 ])"]                                                         = Expression.Constant(new Memory<int>([ 1, 2, 3, 4 ])),
        ["null"]                                                                                = Expression.Constant(null),
        ["object()"]                                                                            = Expression.Constant(new object()),
        ["Object1()"]                                                                           = Expression.Constant(new Object1(), typeof(Object1)),
        ["Queue<int>([ 1, 2, 3, 4 ])"]                                                          = Expression.Constant(new Queue<int>([ 1, 2, 3, 4 ])),
        ["Queue<int>([1, 2, 3, 4])"]                                                            = Expression.Constant(new Queue<int>([1, 2, 3, 4])),
        ["ReadOnlyCollection<int>([1, 2, 3, 4])"]                                               = Expression.Constant(new ReadOnlyCollection<int>([1, 2, 3, 4])),
        ["ReadOnlyDictionary<int, string>..."]                                                  = Expression.Constant(new ReadOnlyDictionary<int, string>(new Dictionary<int, string>{ [1] ="one", [2]="two" })),
        ["ReadOnlyMemory<byte>([1, 2, 3, 1, 2, 3, 1, 2, 3, 10 ])"]                              = Expression.Constant(new ReadOnlyMemory<byte>([1, 2, 3, 1, 2, 3, 1, 2, 3, 10 ])),
        ["ReadOnlyMemory<int>([ 1, 2, 3, 4 ])"]                                                 = Expression.Constant(new ReadOnlyMemory<int>([ 1, 2, 3, 4 ])),
        ["SortedDictionary<int, string>{ [1] =\"one\", [2]=\"two\" }"]                          = Expression.Constant(new SortedDictionary<int, string>{ [1] ="one", [2]="two" }),
        ["SortedSet<int>([1, 2, 3, 4])"]                                                        = Expression.Constant(new SortedSet<int>([1, 2, 3, 4])),
        ["Stack<int>([ 1, 2, 3, 4 ])"]                                                          = Expression.Constant(new Stack<int>([ 1, 2, 3, 4 ])),
        ["Stack<int>([1, 2, 3, 4])"]                                                            = Expression.Constant(new Stack<int>([1, 2, 3, 4])),
        ["StructDataContract1() { IntProperty = 7, StringProperty = \"vm\" }"]                  = Expression.Constant(new StructDataContract1() { IntProperty = 7, StringProperty = "vm" }, typeof(StructDataContract1)),
        ["StructDataContract1()"]                                                               = Expression.Constant(new StructDataContract1()),
        ["StructDataContract1?() { IntProperty = 7, StringProperty = \"vm\" }"]                 = Expression.Constant((StructDataContract1?)new StructDataContract1() { IntProperty = 7, StringProperty = "vm" }, typeof(StructDataContract1?)),
        ["StructDataContract1?[]"]                                                              = Expression.Constant(new StructDataContract1?[]
                                                                                                                        {
                                                                                                                            new() {
                                                                                                                                IntProperty = 0,
                                                                                                                                StringProperty = "vm",
                                                                                                                            },
                                                                                                                            null,
                                                                                                                            new() {
                                                                                                                                IntProperty = 1,
                                                                                                                                StringProperty = "vm vm",
                                                                                                                            },
                                                                                                                            null
                                                                                                                        }),
        ["StructDataContract1[]"]                                                               = Expression.Constant(new StructDataContract1[]
                                                                                                                        {
                                                                                                                            new() {
                                                                                                                                IntProperty = 0,
                                                                                                                                StringProperty = "vm",
                                                                                                                            },
                                                                                                                            new() {
                                                                                                                                IntProperty = 1,
                                                                                                                                StringProperty = "vm vm",
                                                                                                                            },
                                                                                                                        }),
        ["StructSerializable1() { IntProperty = 7, StringProperty = \"vm\" }"]                  = Expression.Constant(new StructSerializable1() { IntProperty = 7, StringProperty = "vm" }, typeof(StructSerializable1)),
        ["StructSerializable1()"]                                                               = Expression.Constant(new StructSerializable1()),
        ["StructSerializable1?[]"]                                                              = Expression.Constant(new StructSerializable1?[]
                                                                                                                        {
                                                                                                                            new() {
                                                                                                                                IntProperty = 0,
                                                                                                                                StringProperty = "vm",
                                                                                                                            },
                                                                                                                            null,
                                                                                                                            new() {
                                                                                                                                IntProperty = 1,
                                                                                                                                StringProperty = "vm vm",
                                                                                                                            },
                                                                                                                            null
                                                                                                                        }),
        ["StructSerializable1[]"]                                                               = Expression.Constant(new StructSerializable1[]
                                                                                                                        {
                                                                                                                            new () {
                                                                                                                                IntProperty = 0,
                                                                                                                                StringProperty = "vm",
                                                                                                                            },
                                                                                                                            new() {
                                                                                                                                IntProperty = 1,
                                                                                                                                StringProperty = "vm vm",
                                                                                                                            },
                                                                                                                        }),
        ["Tuple<int, string>(1, \"one\")"]                                                      = Expression.Constant(new Tuple<int, string>(1, "one")),
    };
}
